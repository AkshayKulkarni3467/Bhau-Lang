[Extern] extern printf (extern) (0)
[Function start] function factorial begin:
[Parameter] param a (idt) (1)
[Declaration] t0 (bool) (1) = 0 (int) (1)
[Declaration] t1 (idt) (1) = 0 (int) (1)
[Assignment] t1 (idt) (1) = a (idt) (1)
[Declaration] t2 (int) (1) = 0 (int) (1)
[Assignment] t2 (int) (1) = 1 (int) (1)
[Binary Op] t0 (bool) (1) = t1 (idt) (1) <= t2 (int) (1) 
[Conditional Jump] if t0 (bool) (1) != 0 (int) (1) goto L0
[Jump] goto L1

[Label] L0:
[Declaration] t3 (int) (2) = 1 (int) (2)
[Return] return t3 (int) (2)

[Label] L1:
[Declaration] t5 (int) (1) = 0 (int) (1)
[Declaration] t6 (idt) (1) = 0 (int) (1)
[Assignment] t6 (idt) (1) = a (idt) (1)
[Declaration] t7 (int) (1) = 0 (int) (1)
[Assignment] t7 (int) (1) = 1 (int) (1)
[Binary Op] t5 (int) (1) = t6 (idt) (1) - t7 (int) (1) 
[Declaration] t4 (int) (1) = t5 (int) (1)
[Argument] arg t4 (int) (1)
[Declaration] t8 (int) (1) = 0 (int) (1)
[Function call] t8 (int) (1) = call factorial (idt) (1), 1
[Declaration] t9 (int) (1) = 0 (int) (1)
[Declaration] t10 (idt) (1) = 0 (int) (1)
[Assignment] t10 (idt) (1) = a (idt) (1)
[Declaration] t11 (int) (1) = 0 (int) (1)
[Assignment] t11 (int) (1) = t8 (int) (1)
[Binary Op] t9 (int) (1) = t10 (idt) (1) * t11 (int) (1) 
[Declaration] t12 (int) (1) = t9 (int) (1)
[Return] return t12 (int) (1)
[Function end] function end
[Function start] function fibonacci begin:
[Parameter] param a (idt) (3)
[Declaration] t13 (bool) (3) = 0 (int) (3)
[Declaration] t14 (idt) (3) = 0 (int) (3)
[Assignment] t14 (idt) (3) = a (idt) (3)
[Declaration] t15 (int) (3) = 0 (int) (3)
[Assignment] t15 (int) (3) = 1 (int) (3)
[Binary Op] t13 (bool) (3) = t14 (idt) (3) <= t15 (int) (3) 
[Conditional Jump] if t13 (bool) (3) != 0 (int) (3) goto L2
[Jump] goto L3

[Label] L2:
[Declaration] t16 (idt) (4) = a (idt) (4)
[Return] return t16 (idt) (4)

[Label] L3:
[Declaration] t18 (int) (3) = 0 (int) (3)
[Declaration] t19 (idt) (3) = 0 (int) (3)
[Assignment] t19 (idt) (3) = a (idt) (3)
[Declaration] t20 (int) (3) = 0 (int) (3)
[Assignment] t20 (int) (3) = 1 (int) (3)
[Binary Op] t18 (int) (3) = t19 (idt) (3) - t20 (int) (3) 
[Declaration] t17 (int) (3) = t18 (int) (3)
[Argument] arg t17 (int) (3)
[Declaration] t21 (int) (3) = 0 (int) (3)
[Function call] t21 (int) (3) = call fibonacci (idt) (3), 1
[Declaration] t23 (int) (3) = 0 (int) (3)
[Declaration] t24 (idt) (3) = 0 (int) (3)
[Assignment] t24 (idt) (3) = a (idt) (3)
[Declaration] t25 (int) (3) = 0 (int) (3)
[Assignment] t25 (int) (3) = 2 (int) (3)
[Binary Op] t23 (int) (3) = t24 (idt) (3) - t25 (int) (3) 
[Declaration] t22 (int) (3) = t23 (int) (3)
[Argument] arg t22 (int) (3)
[Declaration] t26 (int) (3) = 0 (int) (3)
[Function call] t26 (int) (3) = call fibonacci (idt) (3), 1
[Declaration] t27 (int) (3) = 0 (int) (3)
[Declaration] t28 (int) (3) = 0 (int) (3)
[Assignment] t28 (int) (3) = t21 (int) (3)
[Declaration] t29 (int) (3) = 0 (int) (3)
[Assignment] t29 (int) (3) = t26 (int) (3)
[Binary Op] t27 (int) (3) = t28 (int) (3) + t29 (int) (3) 
[Declaration] t30 (int) (3) = t27 (int) (3)
[Return] return t30 (int) (3)
[Function end] function end
[Function start] function recurse_sum begin:
[Parameter] param a (idt) (5)
[Declaration] t31 (bool) (5) = 0 (int) (5)
[Declaration] t32 (idt) (5) = 0 (int) (5)
[Assignment] t32 (idt) (5) = a (idt) (5)
[Declaration] t33 (int) (5) = 0 (int) (5)
[Assignment] t33 (int) (5) = 0 (int) (5)
[Binary Op] t31 (bool) (5) = t32 (idt) (5) == t33 (int) (5) 
[Conditional Jump] if t31 (bool) (5) != 0 (int) (5) goto L4
[Jump] goto L5

[Label] L4:
[Declaration] t34 (int) (6) = 0 (int) (6)
[Return] return t34 (int) (6)

[Label] L5:
[Declaration] t36 (int) (5) = 0 (int) (5)
[Declaration] t37 (idt) (5) = 0 (int) (5)
[Assignment] t37 (idt) (5) = a (idt) (5)
[Declaration] t38 (int) (5) = 0 (int) (5)
[Assignment] t38 (int) (5) = 1 (int) (5)
[Binary Op] t36 (int) (5) = t37 (idt) (5) - t38 (int) (5) 
[Declaration] t35 (int) (5) = t36 (int) (5)
[Argument] arg t35 (int) (5)
[Declaration] t39 (int) (5) = 0 (int) (5)
[Function call] t39 (int) (5) = call recurse_sum (idt) (5), 1
[Declaration] t40 (int) (5) = 0 (int) (5)
[Declaration] t41 (idt) (5) = 0 (int) (5)
[Assignment] t41 (idt) (5) = a (idt) (5)
[Declaration] t42 (int) (5) = 0 (int) (5)
[Assignment] t42 (int) (5) = t39 (int) (5)
[Binary Op] t40 (int) (5) = t41 (idt) (5) + t42 (int) (5) 
[Declaration] t43 (int) (5) = t40 (int) (5)
[Return] return t43 (int) (5)
[Function end] function end
[Function start] function inv_digits begin:
[Parameter] param a (idt) (7)
[Declaration] t44 (bool) (7) = 0 (int) (7)
[Declaration] t45 (idt) (7) = 0 (int) (7)
[Assignment] t45 (idt) (7) = a (idt) (7)
[Declaration] t46 (int) (7) = 0 (int) (7)
[Assignment] t46 (int) (7) = 0 (int) (7)
[Binary Op] t44 (bool) (7) = t45 (idt) (7) == t46 (int) (7) 
[Conditional Jump] if t44 (bool) (7) != 0 (int) (7) goto L6
[Jump] goto L7

[Label] L6:
[Declaration] t47 (int) (8) = 0 (int) (8)
[Return] return t47 (int) (8)

[Label] L7:
[Declaration] t48 (str) (7) = %d  (str) (7)
[Argument] arg t48 (str) (7)
[Declaration] t50 (int) (7) = 0 (int) (7)
[Declaration] t51 (idt) (7) = 0 (int) (7)
[Assignment] t51 (idt) (7) = a (idt) (7)
[Declaration] t52 (int) (7) = 0 (int) (7)
[Assignment] t52 (int) (7) = 10 (int) (7)
[Binary Op] t50 (int) (7) = t51 (idt) (7) % t52 (int) (7) 
[Declaration] t49 (int) (7) = t50 (int) (7)
[Argument] arg t49 (int) (7)
[Declaration] t53 (int) (7) = 0 (int) (7)
[Function call] t53 (int) (7) = call printf (extern) (7), 2
[Declaration] t55 (int) (7) = 0 (int) (7)
[Declaration] t56 (idt) (7) = 0 (int) (7)
[Assignment] t56 (idt) (7) = a (idt) (7)
[Declaration] t57 (int) (7) = 0 (int) (7)
[Assignment] t57 (int) (7) = 10 (int) (7)
[Binary Op] t55 (int) (7) = t56 (idt) (7) / t57 (int) (7) 
[Declaration] t54 (int) (7) = t55 (int) (7)
[Argument] arg t54 (int) (7)
[Declaration] t58 (int) (7) = 0 (int) (7)
[Function call] t58 (int) (7) = call inv_digits (idt) (7), 1
[Declaration] t59 (int) (7) = t58 (int) (7)
[Return] return t59 (int) (7)
[Function end] function end
[Function start] function power begin:
[Parameter] param base (idt) (9)
[Parameter] param exp (idt) (9)
[Declaration] t60 (bool) (9) = 0 (int) (9)
[Declaration] t61 (idt) (9) = 0 (int) (9)
[Assignment] t61 (idt) (9) = exp (idt) (9)
[Declaration] t62 (int) (9) = 0 (int) (9)
[Assignment] t62 (int) (9) = 0 (int) (9)
[Binary Op] t60 (bool) (9) = t61 (idt) (9) == t62 (int) (9) 
[Conditional Jump] if t60 (bool) (9) != 0 (int) (9) goto L8
[Jump] goto L9

[Label] L8:
[Declaration] t63 (int) (10) = 1 (int) (10)
[Return] return t63 (int) (10)

[Label] L9:
[Declaration] t64 (idt) (9) = base (idt) (9)
[Argument] arg t64 (idt) (9)
[Declaration] t66 (int) (9) = 0 (int) (9)
[Declaration] t67 (idt) (9) = 0 (int) (9)
[Assignment] t67 (idt) (9) = exp (idt) (9)
[Declaration] t68 (int) (9) = 0 (int) (9)
[Assignment] t68 (int) (9) = 1 (int) (9)
[Binary Op] t66 (int) (9) = t67 (idt) (9) - t68 (int) (9) 
[Declaration] t65 (int) (9) = t66 (int) (9)
[Argument] arg t65 (int) (9)
[Declaration] t69 (int) (9) = 0 (int) (9)
[Function call] t69 (int) (9) = call power (idt) (9), 2
[Declaration] t70 (int) (9) = 0 (int) (9)
[Declaration] t71 (idt) (9) = 0 (int) (9)
[Assignment] t71 (idt) (9) = base (idt) (9)
[Declaration] t72 (int) (9) = 0 (int) (9)
[Assignment] t72 (int) (9) = t69 (int) (9)
[Binary Op] t70 (int) (9) = t71 (idt) (9) * t72 (int) (9) 
[Declaration] t73 (int) (9) = t70 (int) (9)
[Return] return t73 (int) (9)
[Function end] function end
[Function start] function reverse begin:
[Parameter] param n (idt) (11)
[Parameter] param rev (idt) (11)
[Declaration] t74 (bool) (11) = 0 (int) (11)
[Declaration] t75 (idt) (11) = 0 (int) (11)
[Assignment] t75 (idt) (11) = n (idt) (11)
[Declaration] t76 (int) (11) = 0 (int) (11)
[Assignment] t76 (int) (11) = 0 (int) (11)
[Binary Op] t74 (bool) (11) = t75 (idt) (11) == t76 (int) (11) 
[Conditional Jump] if t74 (bool) (11) != 0 (int) (11) goto L10
[Jump] goto L11

[Label] L10:
[Declaration] t77 (idt) (12) = rev (idt) (12)
[Return] return t77 (idt) (12)

[Label] L11:
[Declaration] t79 (int) (11) = 0 (int) (11)
[Declaration] t80 (idt) (11) = 0 (int) (11)
[Assignment] t80 (idt) (11) = n (idt) (11)
[Declaration] t81 (int) (11) = 0 (int) (11)
[Assignment] t81 (int) (11) = 10 (int) (11)
[Binary Op] t79 (int) (11) = t80 (idt) (11) / t81 (int) (11) 
[Declaration] t78 (int) (11) = t79 (int) (11)
[Argument] arg t78 (int) (11)
[Declaration] t83 (int) (11) = 0 (int) (11)
[Declaration] t84 (idt) (11) = 0 (int) (11)
[Assignment] t84 (idt) (11) = rev (idt) (11)
[Declaration] t85 (int) (11) = 0 (int) (11)
[Assignment] t85 (int) (11) = 10 (int) (11)
[Binary Op] t83 (int) (11) = t84 (idt) (11) * t85 (int) (11) 
[Declaration] t86 (int) (11) = 0 (int) (11)
[Declaration] t87 (idt) (11) = 0 (int) (11)
[Assignment] t87 (idt) (11) = n (idt) (11)
[Declaration] t88 (int) (11) = 0 (int) (11)
[Assignment] t88 (int) (11) = 10 (int) (11)
[Binary Op] t86 (int) (11) = t87 (idt) (11) % t88 (int) (11) 
[Declaration] t89 (int) (11) = 0 (int) (11)
[Declaration] t90 (int) (11) = 0 (int) (11)
[Assignment] t90 (int) (11) = t83 (int) (11)
[Declaration] t91 (int) (11) = 0 (int) (11)
[Assignment] t91 (int) (11) = t86 (int) (11)
[Binary Op] t89 (int) (11) = t90 (int) (11) + t91 (int) (11) 
[Declaration] t82 (int) (11) = t89 (int) (11)
[Argument] arg t82 (int) (11)
[Declaration] t92 (int) (11) = 0 (int) (11)
[Function call] t92 (int) (11) = call reverse (idt) (11), 2
[Declaration] t93 (int) (11) = t92 (int) (11)
[Return] return t93 (int) (11)
[Function end] function end
[Function start] function is_palindrome begin:
[Parameter] param n (idt) (13)
[Parameter] param rev (idt) (13)
[Parameter] param orig (idt) (13)
[Declaration] t94 (bool) (13) = 0 (int) (13)
[Declaration] t95 (idt) (13) = 0 (int) (13)
[Assignment] t95 (idt) (13) = n (idt) (13)
[Declaration] t96 (int) (13) = 0 (int) (13)
[Assignment] t96 (int) (13) = 0 (int) (13)
[Binary Op] t94 (bool) (13) = t95 (idt) (13) == t96 (int) (13) 
[Conditional Jump] if t94 (bool) (13) != 0 (int) (13) goto L12
[Jump] goto L13

[Label] L12:
[Declaration] t97 (bool) (14) = 0 (int) (14)
[Declaration] t98 (idt) (14) = 0 (int) (14)
[Assignment] t98 (idt) (14) = rev (idt) (14)
[Declaration] t99 (idt) (14) = 0 (int) (14)
[Assignment] t99 (idt) (14) = orig (idt) (14)
[Binary Op] t97 (bool) (14) = t98 (idt) (14) == t99 (idt) (14) 
[Declaration] t100 (bool) (14) = t97 (bool) (14)
[Return] return t100 (bool) (14)

[Label] L13:
[Declaration] t102 (int) (13) = 0 (int) (13)
[Declaration] t103 (idt) (13) = 0 (int) (13)
[Assignment] t103 (idt) (13) = n (idt) (13)
[Declaration] t104 (int) (13) = 0 (int) (13)
[Assignment] t104 (int) (13) = 10 (int) (13)
[Binary Op] t102 (int) (13) = t103 (idt) (13) / t104 (int) (13) 
[Declaration] t101 (int) (13) = t102 (int) (13)
[Argument] arg t101 (int) (13)
[Declaration] t106 (int) (13) = 0 (int) (13)
[Declaration] t107 (idt) (13) = 0 (int) (13)
[Assignment] t107 (idt) (13) = rev (idt) (13)
[Declaration] t108 (int) (13) = 0 (int) (13)
[Assignment] t108 (int) (13) = 10 (int) (13)
[Binary Op] t106 (int) (13) = t107 (idt) (13) * t108 (int) (13) 
[Declaration] t109 (int) (13) = 0 (int) (13)
[Declaration] t110 (idt) (13) = 0 (int) (13)
[Assignment] t110 (idt) (13) = n (idt) (13)
[Declaration] t111 (int) (13) = 0 (int) (13)
[Assignment] t111 (int) (13) = 10 (int) (13)
[Binary Op] t109 (int) (13) = t110 (idt) (13) % t111 (int) (13) 
[Declaration] t112 (int) (13) = 0 (int) (13)
[Declaration] t113 (int) (13) = 0 (int) (13)
[Assignment] t113 (int) (13) = t106 (int) (13)
[Declaration] t114 (int) (13) = 0 (int) (13)
[Assignment] t114 (int) (13) = t109 (int) (13)
[Binary Op] t112 (int) (13) = t113 (int) (13) + t114 (int) (13) 
[Declaration] t105 (int) (13) = t112 (int) (13)
[Argument] arg t105 (int) (13)
[Declaration] t115 (idt) (13) = orig (idt) (13)
[Argument] arg t115 (idt) (13)
[Declaration] t116 (int) (13) = 0 (int) (13)
[Function call] t116 (int) (13) = call is_palindrome (idt) (13), 3
[Declaration] t117 (int) (13) = t116 (int) (13)
[Return] return t117 (int) (13)
[Function end] function end
[Function start] function gcd begin:
[Parameter] param a (idt) (15)
[Parameter] param b (idt) (15)
[Declaration] t118 (bool) (15) = 0 (int) (15)
[Declaration] t119 (idt) (15) = 0 (int) (15)
[Assignment] t119 (idt) (15) = b (idt) (15)
[Declaration] t120 (int) (15) = 0 (int) (15)
[Assignment] t120 (int) (15) = 0 (int) (15)
[Binary Op] t118 (bool) (15) = t119 (idt) (15) == t120 (int) (15) 
[Conditional Jump] if t118 (bool) (15) != 0 (int) (15) goto L14
[Jump] goto L15

[Label] L14:
[Declaration] t121 (idt) (16) = a (idt) (16)
[Return] return t121 (idt) (16)

[Label] L15:
[Declaration] t122 (idt) (15) = b (idt) (15)
[Argument] arg t122 (idt) (15)
[Declaration] t124 (idt) (15) = 0 (int) (15)
[Declaration] t125 (idt) (15) = 0 (int) (15)
[Assignment] t125 (idt) (15) = a (idt) (15)
[Declaration] t126 (idt) (15) = 0 (int) (15)
[Assignment] t126 (idt) (15) = b (idt) (15)
[Binary Op] t124 (idt) (15) = t125 (idt) (15) % t126 (idt) (15) 
[Declaration] t123 (idt) (15) = t124 (idt) (15)
[Argument] arg t123 (idt) (15)
[Declaration] t127 (int) (15) = 0 (int) (15)
[Function call] t127 (int) (15) = call gcd (idt) (15), 2
[Declaration] t-128 (int) (15) = t127 (int) (15)
[Return] return t-128 (int) (15)
[Function end] function end
[Function start] function print_stars begin:
[Parameter] param n (idt) (17)
[Declaration] t-127 (bool) (17) = 0 (int) (17)
[Declaration] t-126 (idt) (17) = 0 (int) (17)
[Assignment] t-126 (idt) (17) = n (idt) (17)
[Declaration] t-125 (int) (17) = 0 (int) (17)
[Assignment] t-125 (int) (17) = 0 (int) (17)
[Binary Op] t-127 (bool) (17) = t-126 (idt) (17) == t-125 (int) (17) 
[Conditional Jump] if t-127 (bool) (17) != 0 (int) (17) goto L16
[Jump] goto L17

[Label] L16:
[Declaration] t-124 (str) (18) = \n (str) (18)
[Argument] arg t-124 (str) (18)
[Declaration] t-123 (int) (18) = 0 (int) (18)
[Function call] t-123 (int) (18) = call printf (extern) (18), 1
[Declaration] t-122 (int) (18) = 0 (int) (18)
[Return] return t-122 (int) (18)

[Label] L17:
[Declaration] i (int) (17) = 0 (int) (17)

[Label] L18:
[Declaration] t-121 (bool) (17) = 0 (int) (17)
[Declaration] t-120 (int) (17) = 0 (int) (17)
[Assignment] t-120 (int) (17) = i (int) (17)
[Declaration] t-119 (idt) (17) = 0 (int) (17)
[Assignment] t-119 (idt) (17) = n (idt) (17)
[Binary Op] t-121 (bool) (17) = t-120 (int) (17) < t-119 (idt) (17) 
[Conditional Jump] if t-121 (bool) (17) != 0 (int) (17) goto L19
[Jump] goto L20

[Label] L19:
[Declaration] t-118 (str) (19) = *  (str) (19)
[Argument] arg t-118 (str) (19)
[Declaration] t-117 (int) (19) = 0 (int) (19)
[Function call] t-117 (int) (19) = call printf (extern) (19), 1
[Declaration] t-116 (int) (19) = 0 (int) (19)
[Unary op] t-116 (int) (19) = ++i (int) (19) 
[Assignment] i (int) (19) = t-116 (int) (19)
[Jump] goto L18

[Label] L20:
[Declaration] t-115 (str) (17) = \n (str) (17)
[Argument] arg t-115 (str) (17)
[Declaration] t-114 (int) (17) = 0 (int) (17)
[Function call] t-114 (int) (17) = call printf (extern) (17), 1
[Declaration] t-112 (int) (17) = 0 (int) (17)
[Declaration] t-111 (idt) (17) = 0 (int) (17)
[Assignment] t-111 (idt) (17) = n (idt) (17)
[Declaration] t-110 (int) (17) = 0 (int) (17)
[Assignment] t-110 (int) (17) = 1 (int) (17)
[Binary Op] t-112 (int) (17) = t-111 (idt) (17) - t-110 (int) (17) 
[Declaration] t-113 (int) (17) = t-112 (int) (17)
[Argument] arg t-113 (int) (17)
[Declaration] t-109 (int) (17) = 0 (int) (17)
[Function call] t-109 (int) (17) = call print_stars (idt) (17), 1
[Declaration] t-108 (int) (17) = t-109 (int) (17)
[Return] return t-108 (int) (17)
[Function end] function end
[Function start] function digit_sum begin:
[Parameter] param n (idt) (20)
[Declaration] t-107 (bool) (20) = 0 (int) (20)
[Declaration] t-106 (idt) (20) = 0 (int) (20)
[Assignment] t-106 (idt) (20) = n (idt) (20)
[Declaration] t-105 (int) (20) = 0 (int) (20)
[Assignment] t-105 (int) (20) = 0 (int) (20)
[Binary Op] t-107 (bool) (20) = t-106 (idt) (20) == t-105 (int) (20) 
[Conditional Jump] if t-107 (bool) (20) != 0 (int) (20) goto L21
[Jump] goto L22

[Label] L21:
[Declaration] t-104 (int) (21) = 0 (int) (21)
[Return] return t-104 (int) (21)

[Label] L22:
[Declaration] t-103 (int) (20) = 0 (int) (20)
[Declaration] t-102 (idt) (20) = 0 (int) (20)
[Assignment] t-102 (idt) (20) = n (idt) (20)
[Declaration] t-101 (int) (20) = 0 (int) (20)
[Assignment] t-101 (int) (20) = 10 (int) (20)
[Binary Op] t-103 (int) (20) = t-102 (idt) (20) % t-101 (int) (20) 
[Declaration] t-99 (int) (20) = 0 (int) (20)
[Declaration] t-98 (idt) (20) = 0 (int) (20)
[Assignment] t-98 (idt) (20) = n (idt) (20)
[Declaration] t-97 (int) (20) = 0 (int) (20)
[Assignment] t-97 (int) (20) = 10 (int) (20)
[Binary Op] t-99 (int) (20) = t-98 (idt) (20) / t-97 (int) (20) 
[Declaration] t-100 (int) (20) = t-99 (int) (20)
[Argument] arg t-100 (int) (20)
[Declaration] t-96 (int) (20) = 0 (int) (20)
[Function call] t-96 (int) (20) = call digit_sum (idt) (20), 1
[Declaration] t-95 (int) (20) = 0 (int) (20)
[Declaration] t-94 (int) (20) = 0 (int) (20)
[Assignment] t-94 (int) (20) = t-103 (int) (20)
[Declaration] t-93 (int) (20) = 0 (int) (20)
[Assignment] t-93 (int) (20) = t-96 (int) (20)
[Binary Op] t-95 (int) (20) = t-94 (int) (20) + t-93 (int) (20) 
[Declaration] t-92 (int) (20) = t-95 (int) (20)
[Return] return t-92 (int) (20)
[Function end] function end
[Function start] function print_recursion_tests begin:
[Declaration] t-91 (int) (22) = 5 (int) (22)
[Argument] arg t-91 (int) (22)
[Declaration] t-90 (int) (22) = 0 (int) (22)
[Function call] t-90 (int) (22) = call factorial (idt) (22), 1
[Declaration] fac_var (int) (22) = t-90 (int) (22)
[Declaration] t-89 (str) (22) = Factorial : %d\n (str) (22)
[Argument] arg t-89 (str) (22)
[Declaration] t-88 (int) (22) = fac_var (int) (22)
[Argument] arg t-88 (int) (22)
[Declaration] t-87 (int) (22) = 0 (int) (22)
[Function call] t-87 (int) (22) = call printf (extern) (22), 2
[Declaration] t-86 (int) (22) = 5 (int) (22)
[Argument] arg t-86 (int) (22)
[Declaration] t-85 (int) (22) = 0 (int) (22)
[Function call] t-85 (int) (22) = call fibonacci (idt) (22), 1
[Declaration] fib_var (int) (22) = t-85 (int) (22)
[Declaration] t-84 (str) (22) = Fibonacci : %d\n (str) (22)
[Argument] arg t-84 (str) (22)
[Declaration] t-83 (int) (22) = fib_var (int) (22)
[Argument] arg t-83 (int) (22)
[Declaration] t-82 (int) (22) = 0 (int) (22)
[Function call] t-82 (int) (22) = call printf (extern) (22), 2
[Declaration] t-81 (int) (22) = 5 (int) (22)
[Argument] arg t-81 (int) (22)
[Declaration] t-80 (int) (22) = 0 (int) (22)
[Function call] t-80 (int) (22) = call recurse_sum (idt) (22), 1
[Declaration] rsum_var (int) (22) = t-80 (int) (22)
[Declaration] t-79 (str) (22) = Recurse sum : %d\n (str) (22)
[Argument] arg t-79 (str) (22)
[Declaration] t-78 (int) (22) = rsum_var (int) (22)
[Argument] arg t-78 (int) (22)
[Declaration] t-77 (int) (22) = 0 (int) (22)
[Function call] t-77 (int) (22) = call printf (extern) (22), 2
[Declaration] t-76 (int) (22) = 5324 (int) (22)
[Argument] arg t-76 (int) (22)
[Declaration] t-75 (int) (22) = 0 (int) (22)
[Function call] t-75 (int) (22) = call inv_digits (idt) (22), 1
[Declaration] t-74 (str) (22) = \n (str) (22)
[Argument] arg t-74 (str) (22)
[Declaration] t-73 (int) (22) = 0 (int) (22)
[Function call] t-73 (int) (22) = call printf (extern) (22), 1
[Declaration] t-72 (int) (22) = 5 (int) (22)
[Argument] arg t-72 (int) (22)
[Declaration] t-71 (int) (22) = 2 (int) (22)
[Argument] arg t-71 (int) (22)
[Declaration] t-70 (int) (22) = 0 (int) (22)
[Function call] t-70 (int) (22) = call power (idt) (22), 2
[Declaration] pow_var (int) (22) = t-70 (int) (22)
[Declaration] t-69 (str) (22) = Power : %d\n (str) (22)
[Argument] arg t-69 (str) (22)
[Declaration] t-68 (int) (22) = pow_var (int) (22)
[Argument] arg t-68 (int) (22)
[Declaration] t-67 (int) (22) = 0 (int) (22)
[Function call] t-67 (int) (22) = call printf (extern) (22), 2
[Declaration] t-66 (int) (22) = 1234 (int) (22)
[Argument] arg t-66 (int) (22)
[Declaration] t-65 (int) (22) = 0 (int) (22)
[Argument] arg t-65 (int) (22)
[Declaration] t-64 (int) (22) = 0 (int) (22)
[Function call] t-64 (int) (22) = call reverse (idt) (22), 2
[Declaration] reverse_var (int) (22) = t-64 (int) (22)
[Declaration] t-63 (str) (22) = Reverse : %d\n (str) (22)
[Argument] arg t-63 (str) (22)
[Declaration] t-62 (int) (22) = reverse_var (int) (22)
[Argument] arg t-62 (int) (22)
[Declaration] t-61 (int) (22) = 0 (int) (22)
[Function call] t-61 (int) (22) = call printf (extern) (22), 2
[Declaration] t-60 (int) (22) = 1221 (int) (22)
[Argument] arg t-60 (int) (22)
[Declaration] t-59 (int) (22) = 0 (int) (22)
[Argument] arg t-59 (int) (22)
[Declaration] t-58 (int) (22) = 1221 (int) (22)
[Argument] arg t-58 (int) (22)
[Declaration] t-57 (int) (22) = 0 (int) (22)
[Function call] t-57 (int) (22) = call is_palindrome (idt) (22), 3
[Declaration] is_palin (int) (22) = t-57 (int) (22)
[Declaration] t-56 (str) (22) = Is palindrome : %d\n (str) (22)
[Argument] arg t-56 (str) (22)
[Declaration] t-55 (int) (22) = is_palin (int) (22)
[Argument] arg t-55 (int) (22)
[Declaration] t-54 (int) (22) = 0 (int) (22)
[Function call] t-54 (int) (22) = call printf (extern) (22), 2
[Declaration] t-53 (int) (22) = 39 (int) (22)
[Argument] arg t-53 (int) (22)
[Declaration] t-52 (int) (22) = 26 (int) (22)
[Argument] arg t-52 (int) (22)
[Declaration] t-51 (int) (22) = 0 (int) (22)
[Function call] t-51 (int) (22) = call gcd (idt) (22), 2
[Declaration] gcd_var (int) (22) = t-51 (int) (22)
[Declaration] t-50 (str) (22) = GCD of 26 & 39 : %d\n (str) (22)
[Argument] arg t-50 (str) (22)
[Declaration] t-49 (int) (22) = gcd_var (int) (22)
[Argument] arg t-49 (int) (22)
[Declaration] t-48 (int) (22) = 0 (int) (22)
[Function call] t-48 (int) (22) = call printf (extern) (22), 2
[Declaration] t-47 (int) (22) = 10 (int) (22)
[Argument] arg t-47 (int) (22)
[Declaration] t-46 (int) (22) = 0 (int) (22)
[Function call] t-46 (int) (22) = call print_stars (idt) (22), 1
[Declaration] t-45 (int) (22) = 1234 (int) (22)
[Argument] arg t-45 (int) (22)
[Declaration] t-44 (int) (22) = 0 (int) (22)
[Function call] t-44 (int) (22) = call digit_sum (idt) (22), 1
[Declaration] dsum_var (int) (22) = t-44 (int) (22)
[Declaration] t-43 (str) (22) = Sum of digits : %d\n (str) (22)
[Argument] arg t-43 (str) (22)
[Declaration] t-42 (int) (22) = dsum_var (int) (22)
[Argument] arg t-42 (int) (22)
[Declaration] t-41 (int) (22) = 0 (int) (22)
[Function call] t-41 (int) (22) = call printf (extern) (22), 2
[Function end] function end
[Main start] main begin:
[Declaration] t-40 (int) (23) = 0 (int) (23)
[Function call] t-40 (int) (23) = call print_recursion_tests (idt) (23), 0
[Main end] main end

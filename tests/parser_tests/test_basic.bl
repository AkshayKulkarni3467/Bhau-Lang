hi bhau

bhau baherun ghe printf;
bhau baherun ghe strlen;
bhau baherun ghe scanf;

bhau hai ahe global = 99;
bhau hai ahe pi = 3.14;
bhau hai ahe name = "BhauLang Tester";
bhau hai ahe x = y = z = 42;

bhau lakshat thev complex(a, b, c){
    bhau hai ahe result = 0;
    bhau joparent(a < b + c){
        bhau hai ahe i = 0;
        bhau joparent(i < 5){
            result = result + a * b - c + i;
            i = i + 1;
        }
        a = a + 1;
    }

    bhau jar (result > 100) {
        bhau parat de result;
    }

    bhau nahitar(result == 100){
        bhau parat de result + 1;
    }

    bhau tar {
        bhau parat de 0;
    }
}

bhau lakshat thev deeply_nested(n){
    bhau hai ahe temp = 1;
    bhau joparent(n > 0){
        bhau jar(n % 2 == 0){
            temp = temp * 2;
        }
        bhau nahitar(n % 3 == 0){
            temp = temp + 3;
        }
        bhau tar {
            temp = temp + 1;
        }
        n = n - 1;
    }
    bhau parat de temp;
}

bhau lakshat thev test_strings(){
    bhau hai ahe str1 = "Hello";
    bhau hai ahe str2 = "BhauLang";
    printf("Message: ");
    printf(str2);
}

bhau lakshat thev mega_recursive(x){
    bhau jar(x <= 1){
        bhau parat de 1;
    }
    bhau parat de x * mega_recursive(x - 1);
}

bhau lakshat thev nested_conditions(val){
    bhau jar(val > 0){
        bhau jar(val < 10){
            printf("Single Digit Positive\n");
        }
        bhau nahitar(val < 100){
            printf("Two Digit Positive\n");
        }
        bhau tar {
            printf("Large Positive\n");
        }
    }
    bhau nahitar(val < 0){
        printf("Negative\n");
    }
    bhau tar {
        printf("Zero\n");
    }
}

bhau lakshat thev loop_fun(){
    bhau hai ahe sum = 0;
    bhau hai ahe i = 1;
    bhau joparent(i <= 10){
        sum = sum + i;
        i = i + 1;
    }
    bhau parat de sum;
}

bhau lakshat thev test_scope_shadowing(){
    bhau hai ahe val = 5;
    bhau joparent(val < 10){
        bhau hai ahe val = 20;
        val = val + 1;
        printf(val);
        bhau thamb;
    }
    printf(val);
}

bhau lakshat thev test_big_exprs(){
    bhau hai ahe a = 1 + 2 * 3 + 4 - 5 + 6 * (7 + 8);
    bhau hai ahe b = a * a + a - (3 + 4 * (5 + 6));
    bhau parat de b;
}

bhau lakshat thev empty_else(val){
    bhau jar(val == 1){
        printf("One\n");
    }
    bhau tar {
    }
}

bhau lakshat thev test_all(){
    printf("Complex: "); printf(complex(1,2,3));
    printf("Deep: "); printf(deeply_nested(10));
    test_strings();
    printf("Mega Recursive 5: "); printf(mega_recursive(5));
    nested_conditions(5);
    nested_conditions(-5);
    nested_conditions(100);
    printf("Loop Fun: "); printf(loop_fun());
    test_scope_shadowing();
    printf("Big expr: "); printf(test_big_exprs());
    empty_else(1);
}

bhau ithun chalu {
    printf(name);
    test_all();
}

bye bhau

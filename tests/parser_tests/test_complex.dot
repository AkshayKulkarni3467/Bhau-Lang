digraph AST {
  node [shape=box, style=filled, fillcolor=lightblue];
  node0 [label="PROGRAM"]
  node1 [label="EXTERN"]
  node2 [label="IDENT: printf"]
  node1 -> node2;
  node0 -> node1;
  node3 [label="EXTERN"]
  node4 [label="IDENT: scanf"]
  node3 -> node4;
  node0 -> node3;
  node5 [label="EXTERN"]
  node6 [label="IDENT: strlen"]
  node5 -> node6;
  node0 -> node5;
  node7 [label="ASSIGN: BL_EQUAL"]
  node8 [label="IDENT: global_1"]
  node7 -> node8;
  node9 [label="INT: 100"]
  node7 -> node9;
  node0 -> node7;
  node10 [label="ASSIGN: BL_EQUAL"]
  node11 [label="IDENT: global_2"]
  node10 -> node11;
  node12 [label="INT: 200"]
  node10 -> node12;
  node0 -> node10;
  node13 [label="ASSIGN: BL_EQUAL"]
  node14 [label="IDENT: app_name"]
  node13 -> node14;
  node15 [label="STRING: Stress Tester"]
  node13 -> node15;
  node0 -> node13;
  node16 [label="FUNCTION: math_ops"]
  node17 [label="IDENT: a"]
  node16 -> node17;
  node18 [label="IDENT: b"]
  node16 -> node18;
  node19 [label="IDENT: c"]
  node16 -> node19;
  node20 [label="BLOCK"]
  node21 [label="ASSIGN: BL_EQUAL"]
  node22 [label="IDENT: result"]
  node21 -> node22;
  node23 [label="BINOP: BL_ADDBINOP"]
  node24 [label="BINOP: BL_SUBBINOP"]
  node25 [label="BINOP: BL_ADDBINOP"]
  node26 [label="BINOP: BL_MULTBINOP"]
  node27 [label="IDENT: a"]
  node26 -> node27;
  node28 [label="IDENT: b"]
  node26 -> node28;
  node25 -> node26;
  node29 [label="IDENT: c"]
  node25 -> node29;
  node24 -> node25;
  node30 [label="BINOP: BL_DIVBINOP"]
  node31 [label="IDENT: a"]
  node30 -> node31;
  node32 [label="BINOP: BL_ADDBINOP"]
  node33 [label="IDENT: b"]
  node32 -> node33;
  node34 [label="INT: 1"]
  node32 -> node34;
  node30 -> node32;
  node24 -> node30;
  node23 -> node24;
  node35 [label="BINOP: BL_MULTBINOP"]
  node36 [label="BINOP: BL_ADDBINOP"]
  node37 [label="IDENT: a"]
  node36 -> node37;
  node38 [label="IDENT: b"]
  node36 -> node38;
  node35 -> node36;
  node39 [label="BINOP: BL_SUBBINOP"]
  node40 [label="IDENT: c"]
  node39 -> node40;
  node41 [label="INT: 2"]
  node39 -> node41;
  node35 -> node39;
  node23 -> node35;
  node21 -> node23;
  node20 -> node21;
  node42 [label="ASSIGN: BL_EQUAL"]
  node43 [label="IDENT: alt"]
  node42 -> node43;
  node44 [label="BINOP: BL_ADDBINOP"]
  node45 [label="BINOP: BL_MULTBINOP"]
  node46 [label="BINOP: BL_ADDBINOP"]
  node47 [label="BINOP: BL_SUBBINOP"]
  node48 [label="BINOP: BL_ADDBINOP"]
  node49 [label="BINOP: BL_MULTBINOP"]
  node50 [label="IDENT: a"]
  node49 -> node50;
  node51 [label="IDENT: b"]
  node49 -> node51;
  node48 -> node49;
  node52 [label="IDENT: c"]
  node48 -> node52;
  node47 -> node48;
  node53 [label="BINOP: BL_DIVBINOP"]
  node54 [label="IDENT: a"]
  node53 -> node54;
  node55 [label="BINOP: BL_ADDBINOP"]
  node56 [label="IDENT: b"]
  node55 -> node56;
  node57 [label="INT: 1"]
  node55 -> node57;
  node53 -> node55;
  node47 -> node53;
  node46 -> node47;
  node58 [label="BINOP: BL_MULTBINOP"]
  node59 [label="BINOP: BL_ADDBINOP"]
  node60 [label="IDENT: a"]
  node59 -> node60;
  node61 [label="IDENT: b"]
  node59 -> node61;
  node58 -> node59;
  node62 [label="BINOP: BL_SUBBINOP"]
  node63 [label="IDENT: c"]
  node62 -> node63;
  node64 [label="INT: 2"]
  node62 -> node64;
  node58 -> node62;
  node46 -> node58;
  node45 -> node46;
  node65 [label="INT: 2"]
  node45 -> node65;
  node44 -> node45;
  node66 [label="BINOP: BL_MODBINOP"]
  node67 [label="BINOP: BL_ADDBINOP"]
  node68 [label="BINOP: BL_SUBBINOP"]
  node69 [label="IDENT: a"]
  node68 -> node69;
  node70 [label="IDENT: b"]
  node68 -> node70;
  node67 -> node68;
  node71 [label="BINOP: BL_MULTBINOP"]
  node72 [label="IDENT: c"]
  node71 -> node72;
  node73 [label="INT: 10"]
  node71 -> node73;
  node67 -> node71;
  node66 -> node67;
  node74 [label="INT: 7"]
  node66 -> node74;
  node44 -> node66;
  node42 -> node44;
  node20 -> node42;
  node75 [label="RETURN"]
  node76 [label="BINOP: BL_ADDBINOP"]
  node77 [label="BINOP: BL_ADDBINOP"]
  node78 [label="BINOP: BL_SUBBINOP"]
  node79 [label="BINOP: BL_ADDBINOP"]
  node80 [label="BINOP: BL_MULTBINOP"]
  node81 [label="IDENT: a"]
  node80 -> node81;
  node82 [label="IDENT: b"]
  node80 -> node82;
  node79 -> node80;
  node83 [label="IDENT: c"]
  node79 -> node83;
  node78 -> node79;
  node84 [label="BINOP: BL_DIVBINOP"]
  node85 [label="IDENT: a"]
  node84 -> node85;
  node86 [label="BINOP: BL_ADDBINOP"]
  node87 [label="IDENT: b"]
  node86 -> node87;
  node88 [label="INT: 1"]
  node86 -> node88;
  node84 -> node86;
  node78 -> node84;
  node77 -> node78;
  node89 [label="BINOP: BL_MULTBINOP"]
  node90 [label="BINOP: BL_ADDBINOP"]
  node91 [label="IDENT: a"]
  node90 -> node91;
  node92 [label="IDENT: b"]
  node90 -> node92;
  node89 -> node90;
  node93 [label="BINOP: BL_SUBBINOP"]
  node94 [label="IDENT: c"]
  node93 -> node94;
  node95 [label="INT: 2"]
  node93 -> node95;
  node89 -> node93;
  node77 -> node89;
  node76 -> node77;
  node96 [label="BINOP: BL_ADDBINOP"]
  node97 [label="BINOP: BL_MULTBINOP"]
  node98 [label="BINOP: BL_ADDBINOP"]
  node99 [label="BINOP: BL_SUBBINOP"]
  node100 [label="BINOP: BL_ADDBINOP"]
  node101 [label="BINOP: BL_MULTBINOP"]
  node102 [label="IDENT: a"]
  node101 -> node102;
  node103 [label="IDENT: b"]
  node101 -> node103;
  node100 -> node101;
  node104 [label="IDENT: c"]
  node100 -> node104;
  node99 -> node100;
  node105 [label="BINOP: BL_DIVBINOP"]
  node106 [label="IDENT: a"]
  node105 -> node106;
  node107 [label="BINOP: BL_ADDBINOP"]
  node108 [label="IDENT: b"]
  node107 -> node108;
  node109 [label="INT: 1"]
  node107 -> node109;
  node105 -> node107;
  node99 -> node105;
  node98 -> node99;
  node110 [label="BINOP: BL_MULTBINOP"]
  node111 [label="BINOP: BL_ADDBINOP"]
  node112 [label="IDENT: a"]
  node111 -> node112;
  node113 [label="IDENT: b"]
  node111 -> node113;
  node110 -> node111;
  node114 [label="BINOP: BL_SUBBINOP"]
  node115 [label="IDENT: c"]
  node114 -> node115;
  node116 [label="INT: 2"]
  node114 -> node116;
  node110 -> node114;
  node98 -> node110;
  node97 -> node98;
  node117 [label="INT: 2"]
  node97 -> node117;
  node96 -> node97;
  node118 [label="BINOP: BL_MODBINOP"]
  node119 [label="BINOP: BL_ADDBINOP"]
  node120 [label="BINOP: BL_SUBBINOP"]
  node121 [label="IDENT: a"]
  node120 -> node121;
  node122 [label="IDENT: b"]
  node120 -> node122;
  node119 -> node120;
  node123 [label="BINOP: BL_MULTBINOP"]
  node124 [label="IDENT: c"]
  node123 -> node124;
  node125 [label="INT: 10"]
  node123 -> node125;
  node119 -> node123;
  node118 -> node119;
  node126 [label="INT: 7"]
  node118 -> node126;
  node96 -> node118;
  node76 -> node96;
  node75 -> node76;
  node20 -> node75;
  node16 -> node20;
  node0 -> node16;
  node127 [label="FUNCTION: level2"]
  node128 [label="IDENT: a"]
  node127 -> node128;
  node129 [label="IDENT: b"]
  node127 -> node129;
  node130 [label="BLOCK"]
  node131 [label="ASSIGN: BL_EQUAL"]
  node132 [label="IDENT: c"]
  node131 -> node132;
  node133 [label="BINOP: BL_MULTBINOP"]
  node134 [label="IDENT: a"]
  node133 -> node134;
  node135 [label="IDENT: b"]
  node133 -> node135;
  node131 -> node133;
  node130 -> node131;
  node136 [label="ASSIGN: BL_EQUAL"]
  node137 [label="IDENT: sum"]
  node136 -> node137;
  node138 [label="INT: 0"]
  node136 -> node138;
  node130 -> node136;
  node139 [label="WHILE"]
  node140 [label="BINOP: BL_GRTTHAN"]
  node141 [label="IDENT: c"]
  node140 -> node141;
  node142 [label="INT: 0"]
  node140 -> node142;
  node139 -> node140;
  node143 [label="BLOCK"]
  node144 [label="ASSIGN: BL_EQUAL"]
  node145 [label="IDENT: sum"]
  node144 -> node145;
  node146 [label="BINOP: BL_ADDBINOP"]
  node147 [label="IDENT: sum"]
  node146 -> node147;
  node148 [label="IDENT: c"]
  node146 -> node148;
  node144 -> node146;
  node143 -> node144;
  node149 [label="ASSIGN: BL_EQUAL"]
  node150 [label="IDENT: c"]
  node149 -> node150;
  node151 [label="BINOP: BL_SUBBINOP"]
  node152 [label="IDENT: c"]
  node151 -> node152;
  node153 [label="INT: 1"]
  node151 -> node153;
  node149 -> node151;
  node143 -> node149;
  node139 -> node143;
  node130 -> node139;
  node154 [label="RETURN"]
  node155 [label="IDENT: sum"]
  node154 -> node155;
  node130 -> node154;
  node127 -> node130;
  node0 -> node127;
  node156 [label="FUNCTION: level1"]
  node157 [label="IDENT: x"]
  node156 -> node157;
  node158 [label="BLOCK"]
  node159 [label="ASSIGN: BL_EQUAL"]
  node160 [label="IDENT: y"]
  node159 -> node160;
  node161 [label="BINOP: BL_ADDBINOP"]
  node162 [label="IDENT: x"]
  node161 -> node162;
  node163 [label="INT: 1"]
  node161 -> node163;
  node159 -> node161;
  node158 -> node159;
  node164 [label="ASSIGN: BL_EQUAL"]
  node165 [label="IDENT: z"]
  node164 -> node165;
  node166 [label="BINOP: BL_ADDBINOP"]
  node167 [label="IDENT: y"]
  node166 -> node167;
  node168 [label="INT: 1"]
  node166 -> node168;
  node164 -> node166;
  node158 -> node164;
  node169 [label="RETURN"]
  node170 [label="CALL: level2"]
  node171 [label="IDENT: y"]
  node170 -> node171;
  node172 [label="IDENT: z"]
  node170 -> node172;
  node169 -> node170;
  node158 -> node169;
  node156 -> node158;
  node0 -> node156;
  node173 [label="FUNCTION: decision_tree"]
  node174 [label="IDENT: val"]
  node173 -> node174;
  node175 [label="BLOCK"]
  node176 [label="IF_ELSE"]
  node177 [label="BINOP: BL_LESSTHAN"]
  node178 [label="IDENT: val"]
  node177 -> node178;
  node179 [label="INT: 0"]
  node177 -> node179;
  node176 -> node177;
  node180 [label="BLOCK"]
  node181 [label="CALL: printf"]
  node182 [label="STRING: Neg\n"]
  node181 -> node182;
  node180 -> node181;
  node176 -> node180;
  node183 [label="IF_ELSE"]
  node184 [label="BINOP: BL_ISEQUALCOND"]
  node185 [label="IDENT: val"]
  node184 -> node185;
  node186 [label="INT: 0"]
  node184 -> node186;
  node183 -> node184;
  node187 [label="BLOCK"]
  node188 [label="CALL: printf"]
  node189 [label="STRING: Zero\n"]
  node188 -> node189;
  node187 -> node188;
  node183 -> node187;
  node190 [label="IF_ELSE"]
  node191 [label="BINOP: BL_LOGAND"]
  node192 [label="BINOP: BL_GRTTHAN"]
  node193 [label="IDENT: val"]
  node192 -> node193;
  node194 [label="INT: 0"]
  node192 -> node194;
  node191 -> node192;
  node195 [label="BINOP: BL_LESSTHAN"]
  node196 [label="IDENT: val"]
  node195 -> node196;
  node197 [label="INT: 10"]
  node195 -> node197;
  node191 -> node195;
  node190 -> node191;
  node198 [label="BLOCK"]
  node199 [label="CALL: printf"]
  node200 [label="STRING: Small\n"]
  node199 -> node200;
  node198 -> node199;
  node190 -> node198;
  node201 [label="IF_ELSE"]
  node202 [label="BINOP: BL_LOGAND"]
  node203 [label="BINOP: BL_GRTEQ"]
  node204 [label="IDENT: val"]
  node203 -> node204;
  node205 [label="INT: 10"]
  node203 -> node205;
  node202 -> node203;
  node206 [label="BINOP: BL_LESSTHAN"]
  node207 [label="IDENT: val"]
  node206 -> node207;
  node208 [label="INT: 100"]
  node206 -> node208;
  node202 -> node206;
  node201 -> node202;
  node209 [label="BLOCK"]
  node210 [label="CALL: printf"]
  node211 [label="STRING: Med\n"]
  node210 -> node211;
  node209 -> node210;
  node201 -> node209;
  node212 [label="BLOCK"]
  node213 [label="CALL: printf"]
  node214 [label="STRING: Big\n"]
  node213 -> node214;
  node212 -> node213;
  node201 -> node212;
  node190 -> node201;
  node183 -> node190;
  node176 -> node183;
  node175 -> node176;
  node173 -> node175;
  node0 -> node173;
  node215 [label="FUNCTION: multiple_assigns"]
  node216 [label="BLOCK"]
  node217 [label="ASSIGN: BL_EQUAL"]
  node218 [label="IDENT: z"]
  node217 -> node218;
  node219 [label="INT: 5"]
  node217 -> node219;
  node216 -> node217;
  node220 [label="ASSIGN: BL_EQUAL"]
  node221 [label="IDENT: y"]
  node220 -> node221;
  node222 [label="INT: 5"]
  node220 -> node222;
  node216 -> node220;
  node223 [label="ASSIGN: BL_EQUAL"]
  node224 [label="IDENT: x"]
  node223 -> node224;
  node225 [label="INT: 5"]
  node223 -> node225;
  node216 -> node223;
  node226 [label="ASSIGN: BL_EQUAL"]
  node227 [label="IDENT: x"]
  node226 -> node227;
  node228 [label="BINOP: BL_ADDBINOP"]
  node229 [label="IDENT: x"]
  node228 -> node229;
  node230 [label="INT: 1"]
  node228 -> node230;
  node226 -> node228;
  node216 -> node226;
  node231 [label="ASSIGN: BL_EQUAL"]
  node232 [label="IDENT: y"]
  node231 -> node232;
  node233 [label="BINOP: BL_MULTBINOP"]
  node234 [label="IDENT: y"]
  node233 -> node234;
  node235 [label="INT: 2"]
  node233 -> node235;
  node231 -> node233;
  node216 -> node231;
  node236 [label="ASSIGN: BL_EQUAL"]
  node237 [label="IDENT: z"]
  node236 -> node237;
  node238 [label="BINOP: BL_SUBBINOP"]
  node239 [label="IDENT: z"]
  node238 -> node239;
  node240 [label="INT: 3"]
  node238 -> node240;
  node236 -> node238;
  node216 -> node236;
  node241 [label="RETURN"]
  node242 [label="BINOP: BL_ADDBINOP"]
  node243 [label="BINOP: BL_ADDBINOP"]
  node244 [label="IDENT: x"]
  node243 -> node244;
  node245 [label="IDENT: y"]
  node243 -> node245;
  node242 -> node243;
  node246 [label="IDENT: z"]
  node242 -> node246;
  node241 -> node242;
  node216 -> node241;
  node215 -> node216;
  node0 -> node215;
  node247 [label="FUNCTION: scope_depth_test"]
  node248 [label="BLOCK"]
  node249 [label="ASSIGN: BL_EQUAL"]
  node250 [label="IDENT: val"]
  node249 -> node250;
  node251 [label="INT: 1"]
  node249 -> node251;
  node248 -> node249;
  node252 [label="WHILE"]
  node253 [label="BINOP: BL_LESSTHAN"]
  node254 [label="IDENT: val"]
  node253 -> node254;
  node255 [label="INT: 3"]
  node253 -> node255;
  node252 -> node253;
  node256 [label="BLOCK"]
  node257 [label="ASSIGN: BL_EQUAL"]
  node258 [label="IDENT: val"]
  node257 -> node258;
  node259 [label="INT: 10"]
  node257 -> node259;
  node256 -> node257;
  node260 [label="WHILE"]
  node261 [label="BINOP: BL_GRTTHAN"]
  node262 [label="IDENT: val"]
  node261 -> node262;
  node263 [label="INT: 5"]
  node261 -> node263;
  node260 -> node261;
  node264 [label="BLOCK"]
  node265 [label="ASSIGN: BL_EQUAL"]
  node266 [label="IDENT: val"]
  node265 -> node266;
  node267 [label="INT: 100"]
  node265 -> node267;
  node264 -> node265;
  node268 [label="CALL: printf"]
  node269 [label="IDENT: val"]
  node268 -> node269;
  node264 -> node268;
  node270 [label="ASSIGN: BL_EQUAL"]
  node271 [label="IDENT: val"]
  node270 -> node271;
  node272 [label="BINOP: BL_SUBBINOP"]
  node273 [label="IDENT: val"]
  node272 -> node273;
  node274 [label="INT: 10"]
  node272 -> node274;
  node270 -> node272;
  node264 -> node270;
  node260 -> node264;
  node256 -> node260;
  node275 [label="ASSIGN: BL_EQUAL"]
  node276 [label="IDENT: val"]
  node275 -> node276;
  node277 [label="BINOP: BL_SUBBINOP"]
  node278 [label="IDENT: val"]
  node277 -> node278;
  node279 [label="INT: 1"]
  node277 -> node279;
  node275 -> node277;
  node256 -> node275;
  node252 -> node256;
  node248 -> node252;
  node247 -> node248;
  node0 -> node247;
  node280 [label="FUNCTION: call_chain"]
  node281 [label="IDENT: a"]
  node280 -> node281;
  node282 [label="BLOCK"]
  node283 [label="RETURN"]
  node284 [label="BINOP: BL_ADDBINOP"]
  node285 [label="BINOP: BL_ADDBINOP"]
  node286 [label="CALL: level1"]
  node287 [label="IDENT: a"]
  node286 -> node287;
  node285 -> node286;
  node288 [label="CALL: level2"]
  node289 [label="IDENT: a"]
  node288 -> node289;
  node290 [label="BINOP: BL_ADDBINOP"]
  node291 [label="IDENT: a"]
  node290 -> node291;
  node292 [label="INT: 1"]
  node290 -> node292;
  node288 -> node290;
  node285 -> node288;
  node284 -> node285;
  node293 [label="CALL: math_ops"]
  node294 [label="IDENT: a"]
  node293 -> node294;
  node295 [label="BINOP: BL_ADDBINOP"]
  node296 [label="IDENT: a"]
  node295 -> node296;
  node297 [label="INT: 1"]
  node295 -> node297;
  node293 -> node295;
  node298 [label="BINOP: BL_ADDBINOP"]
  node299 [label="IDENT: a"]
  node298 -> node299;
  node300 [label="INT: 2"]
  node298 -> node300;
  node293 -> node298;
  node284 -> node293;
  node283 -> node284;
  node282 -> node283;
  node280 -> node282;
  node0 -> node280;
  node301 [label="FUNCTION: giant_exprs"]
  node302 [label="BLOCK"]
  node303 [label="ASSIGN: BL_EQUAL"]
  node304 [label="IDENT: val"]
  node303 -> node304;
  node305 [label="INT: 1400"]
  node303 -> node305;
  node302 -> node303;
  node306 [label="ASSIGN: BL_EQUAL"]
  node307 [label="IDENT: val2"]
  node306 -> node307;
  node308 [label="BINOP: BL_ADDBINOP"]
  node309 [label="IDENT: val"]
  node308 -> node309;
  node310 [label="BINOP: BL_SUBBINOP"]
  node311 [label="BINOP: BL_ADDBINOP"]
  node312 [label="BINOP: BL_MULTBINOP"]
  node313 [label="IDENT: val"]
  node312 -> node313;
  node314 [label="INT: 2"]
  node312 -> node314;
  node311 -> node312;
  node315 [label="BINOP: BL_DIVBINOP"]
  node316 [label="IDENT: val"]
  node315 -> node316;
  node317 [label="INT: 3"]
  node315 -> node317;
  node311 -> node315;
  node310 -> node311;
  node318 [label="BINOP: BL_MODBINOP"]
  node319 [label="IDENT: val"]
  node318 -> node319;
  node320 [label="INT: 4"]
  node318 -> node320;
  node310 -> node318;
  node308 -> node310;
  node306 -> node308;
  node302 -> node306;
  node321 [label="ASSIGN: BL_EQUAL"]
  node322 [label="IDENT: val3"]
  node321 -> node322;
  node323 [label="BINOP: BL_ADDBINOP"]
  node324 [label="BINOP: BL_DIVBINOP"]
  node325 [label="BINOP: BL_ADDBINOP"]
  node326 [label="IDENT: val"]
  node325 -> node326;
  node327 [label="BINOP: BL_SUBBINOP"]
  node328 [label="BINOP: BL_ADDBINOP"]
  node329 [label="BINOP: BL_MULTBINOP"]
  node330 [label="IDENT: val"]
  node329 -> node330;
  node331 [label="INT: 2"]
  node329 -> node331;
  node328 -> node329;
  node332 [label="BINOP: BL_DIVBINOP"]
  node333 [label="IDENT: val"]
  node332 -> node333;
  node334 [label="INT: 3"]
  node332 -> node334;
  node328 -> node332;
  node327 -> node328;
  node335 [label="BINOP: BL_MODBINOP"]
  node336 [label="IDENT: val"]
  node335 -> node336;
  node337 [label="INT: 4"]
  node335 -> node337;
  node327 -> node335;
  node325 -> node327;
  node324 -> node325;
  node338 [label="INT: 3"]
  node324 -> node338;
  node323 -> node324;
  node339 [label="BINOP: BL_MODBINOP"]
  node340 [label="BINOP: BL_ADDBINOP"]
  node341 [label="IDENT: val"]
  node340 -> node341;
  node342 [label="BINOP: BL_SUBBINOP"]
  node343 [label="BINOP: BL_ADDBINOP"]
  node344 [label="BINOP: BL_MULTBINOP"]
  node345 [label="IDENT: val"]
  node344 -> node345;
  node346 [label="INT: 2"]
  node344 -> node346;
  node343 -> node344;
  node347 [label="BINOP: BL_DIVBINOP"]
  node348 [label="IDENT: val"]
  node347 -> node348;
  node349 [label="INT: 3"]
  node347 -> node349;
  node343 -> node347;
  node342 -> node343;
  node350 [label="BINOP: BL_MODBINOP"]
  node351 [label="IDENT: val"]
  node350 -> node351;
  node352 [label="INT: 4"]
  node350 -> node352;
  node342 -> node350;
  node340 -> node342;
  node339 -> node340;
  node353 [label="INT: 7"]
  node339 -> node353;
  node323 -> node339;
  node321 -> node323;
  node302 -> node321;
  node354 [label="RETURN"]
  node355 [label="BINOP: BL_ADDBINOP"]
  node356 [label="BINOP: BL_DIVBINOP"]
  node357 [label="BINOP: BL_ADDBINOP"]
  node358 [label="IDENT: val"]
  node357 -> node358;
  node359 [label="BINOP: BL_SUBBINOP"]
  node360 [label="BINOP: BL_ADDBINOP"]
  node361 [label="BINOP: BL_MULTBINOP"]
  node362 [label="IDENT: val"]
  node361 -> node362;
  node363 [label="INT: 2"]
  node361 -> node363;
  node360 -> node361;
  node364 [label="BINOP: BL_DIVBINOP"]
  node365 [label="IDENT: val"]
  node364 -> node365;
  node366 [label="INT: 3"]
  node364 -> node366;
  node360 -> node364;
  node359 -> node360;
  node367 [label="BINOP: BL_MODBINOP"]
  node368 [label="IDENT: val"]
  node367 -> node368;
  node369 [label="INT: 4"]
  node367 -> node369;
  node359 -> node367;
  node357 -> node359;
  node356 -> node357;
  node370 [label="INT: 3"]
  node356 -> node370;
  node355 -> node356;
  node371 [label="BINOP: BL_MODBINOP"]
  node372 [label="BINOP: BL_ADDBINOP"]
  node373 [label="IDENT: val"]
  node372 -> node373;
  node374 [label="BINOP: BL_SUBBINOP"]
  node375 [label="BINOP: BL_ADDBINOP"]
  node376 [label="BINOP: BL_MULTBINOP"]
  node377 [label="IDENT: val"]
  node376 -> node377;
  node378 [label="INT: 2"]
  node376 -> node378;
  node375 -> node376;
  node379 [label="BINOP: BL_DIVBINOP"]
  node380 [label="IDENT: val"]
  node379 -> node380;
  node381 [label="INT: 3"]
  node379 -> node381;
  node375 -> node379;
  node374 -> node375;
  node382 [label="BINOP: BL_MODBINOP"]
  node383 [label="IDENT: val"]
  node382 -> node383;
  node384 [label="INT: 4"]
  node382 -> node384;
  node374 -> node382;
  node372 -> node374;
  node371 -> node372;
  node385 [label="INT: 7"]
  node371 -> node385;
  node355 -> node371;
  node354 -> node355;
  node302 -> node354;
  node301 -> node302;
  node0 -> node301;
  node386 [label="FUNCTION: recursive_deep"]
  node387 [label="IDENT: n"]
  node386 -> node387;
  node388 [label="BLOCK"]
  node389 [label="IF_ELSE"]
  node390 [label="BINOP: BL_LESSEQ"]
  node391 [label="IDENT: n"]
  node390 -> node391;
  node392 [label="INT: 0"]
  node390 -> node392;
  node389 -> node390;
  node393 [label="BLOCK"]
  node394 [label="RETURN"]
  node395 [label="INT: 1"]
  node394 -> node395;
  node393 -> node394;
  node389 -> node393;
  node388 -> node389;
  node396 [label="RETURN"]
  node397 [label="BINOP: BL_ADDBINOP"]
  node398 [label="IDENT: n"]
  node397 -> node398;
  node399 [label="CALL: recursive_deep"]
  node400 [label="BINOP: BL_SUBBINOP"]
  node401 [label="IDENT: n"]
  node400 -> node401;
  node402 [label="INT: 1"]
  node400 -> node402;
  node399 -> node400;
  node397 -> node399;
  node396 -> node397;
  node388 -> node396;
  node386 -> node388;
  node0 -> node386;
  node403 [label="FUNCTION: long_loop_chain"]
  node404 [label="BLOCK"]
  node405 [label="ASSIGN: BL_EQUAL"]
  node406 [label="IDENT: acc"]
  node405 -> node406;
  node407 [label="INT: 0"]
  node405 -> node407;
  node404 -> node405;
  node408 [label="ASSIGN: BL_EQUAL"]
  node409 [label="IDENT: i"]
  node408 -> node409;
  node410 [label="INT: 0"]
  node408 -> node410;
  node404 -> node408;
  node411 [label="WHILE"]
  node412 [label="BINOP: BL_LESSTHAN"]
  node413 [label="IDENT: i"]
  node412 -> node413;
  node414 [label="INT: 100"]
  node412 -> node414;
  node411 -> node412;
  node415 [label="BLOCK"]
  node416 [label="IF_ELSE"]
  node417 [label="BINOP: BL_ISEQUALCOND"]
  node418 [label="BINOP: BL_MODBINOP"]
  node419 [label="IDENT: i"]
  node418 -> node419;
  node420 [label="INT: 10"]
  node418 -> node420;
  node417 -> node418;
  node421 [label="INT: 0"]
  node417 -> node421;
  node416 -> node417;
  node422 [label="BLOCK"]
  node423 [label="CALL: printf"]
  node424 [label="STRING: Tens: "]
  node423 -> node424;
  node422 -> node423;
  node425 [label="CALL: printf"]
  node426 [label="IDENT: i"]
  node425 -> node426;
  node422 -> node425;
  node416 -> node422;
  node415 -> node416;
  node427 [label="ASSIGN: BL_EQUAL"]
  node428 [label="IDENT: acc"]
  node427 -> node428;
  node429 [label="BINOP: BL_ADDBINOP"]
  node430 [label="IDENT: acc"]
  node429 -> node430;
  node431 [label="IDENT: i"]
  node429 -> node431;
  node427 -> node429;
  node415 -> node427;
  node432 [label="ASSIGN: BL_EQUAL"]
  node433 [label="IDENT: i"]
  node432 -> node433;
  node434 [label="BINOP: BL_ADDBINOP"]
  node435 [label="IDENT: i"]
  node434 -> node435;
  node436 [label="INT: 1"]
  node434 -> node436;
  node432 -> node434;
  node415 -> node432;
  node411 -> node415;
  node404 -> node411;
  node437 [label="RETURN"]
  node438 [label="IDENT: acc"]
  node437 -> node438;
  node404 -> node437;
  node403 -> node404;
  node0 -> node403;
  node439 [label="FUNCTION: string_block"]
  node440 [label="BLOCK"]
  node441 [label="ASSIGN: BL_EQUAL"]
  node442 [label="IDENT: base"]
  node441 -> node442;
  node443 [label="STRING: BhauLang"]
  node441 -> node443;
  node440 -> node441;
  node444 [label="ASSIGN: BL_EQUAL"]
  node445 [label="IDENT: desc"]
  node444 -> node445;
  node446 [label="BINOP: BL_ADDBINOP"]
  node447 [label="STRING: BhauLang"]
  node446 -> node447;
  node448 [label="STRING:  is powerful."]
  node446 -> node448;
  node444 -> node446;
  node440 -> node444;
  node449 [label="ASSIGN: BL_EQUAL"]
  node450 [label="IDENT: shout"]
  node449 -> node450;
  node451 [label="BINOP: BL_ADDBINOP"]
  node452 [label="STRING: BhauLang"]
  node451 -> node452;
  node453 [label="STRING: !!!"]
  node451 -> node453;
  node449 -> node451;
  node440 -> node449;
  node454 [label="CALL: printf"]
  node455 [label="BINOP: BL_ADDBINOP"]
  node456 [label="STRING: BhauLang"]
  node455 -> node456;
  node457 [label="STRING:  is powerful."]
  node455 -> node457;
  node454 -> node455;
  node440 -> node454;
  node458 [label="CALL: printf"]
  node459 [label="BINOP: BL_ADDBINOP"]
  node460 [label="STRING: BhauLang"]
  node459 -> node460;
  node461 [label="STRING: !!!"]
  node459 -> node461;
  node458 -> node459;
  node440 -> node458;
  node439 -> node440;
  node0 -> node439;
  node462 [label="FUNCTION: everything"]
  node463 [label="IDENT: val"]
  node462 -> node463;
  node464 [label="BLOCK"]
  node465 [label="ASSIGN: BL_EQUAL"]
  node466 [label="IDENT: temp"]
  node465 -> node466;
  node467 [label="IDENT: val"]
  node465 -> node467;
  node464 -> node465;
  node468 [label="ASSIGN: BL_EQUAL"]
  node469 [label="IDENT: mid"]
  node468 -> node469;
  node470 [label="CALL: recursive_deep"]
  node471 [label="IDENT: temp"]
  node470 -> node471;
  node468 -> node470;
  node464 -> node468;
  node472 [label="ASSIGN: BL_EQUAL"]
  node473 [label="IDENT: ops"]
  node472 -> node473;
  node474 [label="CALL: math_ops"]
  node475 [label="IDENT: temp"]
  node474 -> node475;
  node476 [label="CALL: recursive_deep"]
  node477 [label="IDENT: temp"]
  node476 -> node477;
  node474 -> node476;
  node478 [label="BINOP: BL_ADDBINOP"]
  node479 [label="IDENT: temp"]
  node478 -> node479;
  node480 [label="CALL: recursive_deep"]
  node481 [label="IDENT: temp"]
  node480 -> node481;
  node478 -> node480;
  node474 -> node478;
  node472 -> node474;
  node464 -> node472;
  node482 [label="ASSIGN: BL_EQUAL"]
  node483 [label="IDENT: longres"]
  node482 -> node483;
  node484 [label="CALL: long_loop_chain"]
  node482 -> node484;
  node464 -> node482;
  node485 [label="ASSIGN: BL_EQUAL"]
  node486 [label="IDENT: giant"]
  node485 -> node486;
  node487 [label="CALL: giant_exprs"]
  node485 -> node487;
  node464 -> node485;
  node488 [label="CALL: printf"]
  node489 [label="STRING: temp: "]
  node488 -> node489;
  node464 -> node488;
  node490 [label="CALL: printf"]
  node491 [label="IDENT: temp"]
  node490 -> node491;
  node464 -> node490;
  node492 [label="CALL: printf"]
  node493 [label="STRING: mid: "]
  node492 -> node493;
  node464 -> node492;
  node494 [label="CALL: printf"]
  node495 [label="CALL: recursive_deep"]
  node496 [label="IDENT: temp"]
  node495 -> node496;
  node494 -> node495;
  node464 -> node494;
  node497 [label="CALL: printf"]
  node498 [label="STRING: ops: "]
  node497 -> node498;
  node464 -> node497;
  node499 [label="CALL: printf"]
  node500 [label="CALL: math_ops"]
  node501 [label="IDENT: temp"]
  node500 -> node501;
  node502 [label="CALL: recursive_deep"]
  node503 [label="IDENT: temp"]
  node502 -> node503;
  node500 -> node502;
  node504 [label="BINOP: BL_ADDBINOP"]
  node505 [label="IDENT: temp"]
  node504 -> node505;
  node506 [label="CALL: recursive_deep"]
  node507 [label="IDENT: temp"]
  node506 -> node507;
  node504 -> node506;
  node500 -> node504;
  node499 -> node500;
  node464 -> node499;
  node508 [label="CALL: printf"]
  node509 [label="STRING: longres: "]
  node508 -> node509;
  node464 -> node508;
  node510 [label="CALL: printf"]
  node511 [label="CALL: long_loop_chain"]
  node510 -> node511;
  node464 -> node510;
  node512 [label="CALL: printf"]
  node513 [label="STRING: giant: "]
  node512 -> node513;
  node464 -> node512;
  node514 [label="CALL: printf"]
  node515 [label="CALL: giant_exprs"]
  node514 -> node515;
  node464 -> node514;
  node516 [label="RETURN"]
  node517 [label="BINOP: BL_ADDBINOP"]
  node518 [label="BINOP: BL_ADDBINOP"]
  node519 [label="BINOP: BL_ADDBINOP"]
  node520 [label="BINOP: BL_ADDBINOP"]
  node521 [label="IDENT: temp"]
  node520 -> node521;
  node522 [label="CALL: recursive_deep"]
  node523 [label="IDENT: temp"]
  node522 -> node523;
  node520 -> node522;
  node519 -> node520;
  node524 [label="CALL: math_ops"]
  node525 [label="IDENT: temp"]
  node524 -> node525;
  node526 [label="CALL: recursive_deep"]
  node527 [label="IDENT: temp"]
  node526 -> node527;
  node524 -> node526;
  node528 [label="BINOP: BL_ADDBINOP"]
  node529 [label="IDENT: temp"]
  node528 -> node529;
  node530 [label="CALL: recursive_deep"]
  node531 [label="IDENT: temp"]
  node530 -> node531;
  node528 -> node530;
  node524 -> node528;
  node519 -> node524;
  node518 -> node519;
  node532 [label="CALL: long_loop_chain"]
  node518 -> node532;
  node517 -> node518;
  node533 [label="CALL: giant_exprs"]
  node517 -> node533;
  node516 -> node517;
  node464 -> node516;
  node462 -> node464;
  node0 -> node462;
  node534 [label="FUNCTION: branch_test"]
  node535 [label="BLOCK"]
  node536 [label="ASSIGN: BL_EQUAL"]
  node537 [label="IDENT: val"]
  node536 -> node537;
  node538 [label="INT: 5"]
  node536 -> node538;
  node535 -> node536;
  node539 [label="IF_ELSE"]
  node540 [label="BINOP: BL_GRTTHAN"]
  node541 [label="IDENT: val"]
  node540 -> node541;
  node542 [label="INT: 0"]
  node540 -> node542;
  node539 -> node540;
  node543 [label="BLOCK"]
  node544 [label="IF_ELSE"]
  node545 [label="BINOP: BL_LESSTHAN"]
  node546 [label="IDENT: val"]
  node545 -> node546;
  node547 [label="INT: 3"]
  node545 -> node547;
  node544 -> node545;
  node548 [label="BLOCK"]
  node549 [label="CALL: printf"]
  node550 [label="STRING: Tiny\n"]
  node549 -> node550;
  node548 -> node549;
  node544 -> node548;
  node551 [label="IF_ELSE"]
  node552 [label="BINOP: BL_LESSTHAN"]
  node553 [label="IDENT: val"]
  node552 -> node553;
  node554 [label="INT: 6"]
  node552 -> node554;
  node551 -> node552;
  node555 [label="BLOCK"]
  node556 [label="CALL: printf"]
  node557 [label="STRING: Smallish\n"]
  node556 -> node557;
  node555 -> node556;
  node551 -> node555;
  node558 [label="BLOCK"]
  node559 [label="CALL: printf"]
  node560 [label="STRING: ???\n"]
  node559 -> node560;
  node558 -> node559;
  node551 -> node558;
  node544 -> node551;
  node543 -> node544;
  node539 -> node543;
  node561 [label="BLOCK"]
  node562 [label="CALL: printf"]
  node563 [label="STRING: Negative or Zero\n"]
  node562 -> node563;
  node561 -> node562;
  node539 -> node561;
  node535 -> node539;
  node534 -> node535;
  node0 -> node534;
  node564 [label="MAIN"]
  node565 [label="BLOCK"]
  node566 [label="CALL: printf"]
  node567 [label="STRING: Stress Tester"]
  node566 -> node567;
  node565 -> node566;
  node568 [label="CALL: printf"]
  node569 [label="STRING: ==== Start Stress Test ====\n"]
  node568 -> node569;
  node565 -> node568;
  node570 [label="ASSIGN: BL_EQUAL"]
  node571 [label="IDENT: res1"]
  node570 -> node571;
  node572 [label="CALL: math_ops"]
  node573 [label="INT: 2"]
  node572 -> node573;
  node574 [label="INT: 3"]
  node572 -> node574;
  node575 [label="INT: 4"]
  node572 -> node575;
  node570 -> node572;
  node565 -> node570;
  node576 [label="ASSIGN: BL_EQUAL"]
  node577 [label="IDENT: res2"]
  node576 -> node577;
  node578 [label="CALL: level1"]
  node579 [label="INT: 5"]
  node578 -> node579;
  node576 -> node578;
  node565 -> node576;
  node580 [label="ASSIGN: BL_EQUAL"]
  node581 [label="IDENT: res3"]
  node580 -> node581;
  node582 [label="CALL: call_chain"]
  node583 [label="INT: 3"]
  node582 -> node583;
  node580 -> node582;
  node565 -> node580;
  node584 [label="ASSIGN: BL_EQUAL"]
  node585 [label="IDENT: res4"]
  node584 -> node585;
  node586 [label="CALL: everything"]
  node587 [label="INT: 4"]
  node586 -> node587;
  node584 -> node586;
  node565 -> node584;
  node588 [label="CALL: printf"]
  node589 [label="STRING: MathOps: "]
  node588 -> node589;
  node565 -> node588;
  node590 [label="CALL: printf"]
  node591 [label="CALL: math_ops"]
  node592 [label="INT: 2"]
  node591 -> node592;
  node593 [label="INT: 3"]
  node591 -> node593;
  node594 [label="INT: 4"]
  node591 -> node594;
  node590 -> node591;
  node565 -> node590;
  node595 [label="CALL: printf"]
  node596 [label="STRING: Level1: "]
  node595 -> node596;
  node565 -> node595;
  node597 [label="CALL: printf"]
  node598 [label="CALL: level1"]
  node599 [label="INT: 5"]
  node598 -> node599;
  node597 -> node598;
  node565 -> node597;
  node600 [label="CALL: printf"]
  node601 [label="STRING: CallChain: "]
  node600 -> node601;
  node565 -> node600;
  node602 [label="CALL: printf"]
  node603 [label="CALL: call_chain"]
  node604 [label="INT: 3"]
  node603 -> node604;
  node602 -> node603;
  node565 -> node602;
  node605 [label="CALL: printf"]
  node606 [label="STRING: Everything Combo: "]
  node605 -> node606;
  node565 -> node605;
  node607 [label="CALL: printf"]
  node608 [label="CALL: everything"]
  node609 [label="INT: 4"]
  node608 -> node609;
  node607 -> node608;
  node565 -> node607;
  node610 [label="CALL: decision_tree"]
  node611 [label="INT: -10"]
  node610 -> node611;
  node565 -> node610;
  node612 [label="CALL: decision_tree"]
  node613 [label="INT: 0"]
  node612 -> node613;
  node565 -> node612;
  node614 [label="CALL: decision_tree"]
  node615 [label="INT: 5"]
  node614 -> node615;
  node565 -> node614;
  node616 [label="CALL: decision_tree"]
  node617 [label="INT: 50"]
  node616 -> node617;
  node565 -> node616;
  node618 [label="CALL: decision_tree"]
  node619 [label="INT: 500"]
  node618 -> node619;
  node565 -> node618;
  node620 [label="CALL: multiple_assigns"]
  node565 -> node620;
  node621 [label="CALL: scope_depth_test"]
  node565 -> node621;
  node622 [label="CALL: giant_exprs"]
  node565 -> node622;
  node623 [label="CALL: recursive_deep"]
  node624 [label="INT: 10"]
  node623 -> node624;
  node565 -> node623;
  node625 [label="CALL: long_loop_chain"]
  node565 -> node625;
  node626 [label="CALL: string_block"]
  node565 -> node626;
  node627 [label="CALL: branch_test"]
  node565 -> node627;
  node628 [label="CALL: printf"]
  node629 [label="STRING: ==== End Stress Test ===="]
  node628 -> node629;
  node565 -> node628;
  node564 -> node565;
  node0 -> node564;
}

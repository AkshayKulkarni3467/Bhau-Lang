hi bhau

bhau baherun ghe printf;
bhau baherun ghe scanf;
bhau baherun ghe strlen;

bhau hai ahe global_1 = 100;
bhau hai ahe global_2 = 200;
bhau hai ahe app_name = "Stress Tester";


bhau lakshat thev math_ops(a, b, c){
     bhau hai ahe result = a*b+c - a / (b + 1) + ((a+b)*(c-2));
    bhau hai ahe alt = (result * 2) + (a - b + c * 10) % 7;
    bhau parat de result + alt;
}


bhau lakshat thev level2(a, b){
    bhau hai ahe c = a * b;
    bhau hai ahe sum = 0;
    bhau joparent(c > 0){
        sum = sum + c;
        c = c - 1;
    }
    bhau parat de sum;
}


bhau lakshat thev level1(x){
    bhau hai ahe y = x + 1;
    bhau hai ahe z = y + 1;
    bhau parat de level2(y, z);
}


bhau lakshat thev decision_tree(val){
    bhau jar(val < 0){
        printf("Neg\n");
    }
    bhau nahitar(val == 0){
        printf("Zero\n");
    }
    bhau nahitar(val > 0 && val < 10){
        printf("Small\n");
    }
    bhau nahitar(val >= 10 && val < 100){
        printf("Med\n");
    }
    bhau tar {
        printf("Big\n");
    }
}

bhau lakshat thev multiple_assigns(){
    bhau hai ahe x = y = z = 5;
    x = x + 1;
    y = y * 2;
    z = z - 3;
    bhau parat de x + y + z;
}

bhau lakshat thev scope_depth_test(){
    bhau hai ahe i = 10;
    bhau joparent(i > 0){
        bhau hai ahe j = 10;
        
        bhau joparent(j > 5){
            printf("* ");
            --j;
        }
        printf("\n");
       i = i - 1;
    }
    printf("\n");
}

bhau lakshat thev call_chain(a){
    bhau parat de level1(a) + level2(a, a + 1) + math_ops(a, a+1, a+2);
}

bhau lakshat thev giant_exprs(){
    bhau hai ahe val = ((1+2)*(3+4) - 5 + 6*7 / 2 % 5 + 100 - 42 + (5*5*5*5)) * 2;
    bhau hai ahe val2 = val + (val * 2 + val / 3 - val % 4);
    bhau hai ahe val3 = val2 / 3 + val2 % 7;
    bhau parat de val3;
}

//WARN recursion does not work
bhau lakshat thev recursive_deep(n){
    bhau jar(n <= 0){
        bhau parat de 1;
    }
    bhau parat de n + recursive_deep(n - 1);
}

bhau lakshat thev long_loop_chain(){
    bhau hai ahe acc = 0;
    bhau hai ahe i = 0;
    bhau joparent(i < 100){
        bhau jar(i % 10 == 0){
            printf("Tens: ");
            printf("%d ",i);
        }
        acc = acc + i;
        i = i + 1;
    }
    printf("\n");
    bhau parat de acc;
}

bhau lakshat thev string_block(){
    bhau hai ahe base = "BhauLang";
}

bhau lakshat thev everything(val){
    bhau hai ahe temp = val;
    //bhau hai ahe mid = recursive_deep(temp);
    bhau hai ahe ops = math_ops(temp, 1, temp+1);
    bhau hai ahe longres = long_loop_chain();
    bhau hai ahe giant = giant_exprs();

    printf("temp: "); printf("%d\n",temp);
    printf("ops: "); printf("%d\n",ops);
    printf("longres: "); printf("%d\n",longres);
    printf("giant: "); printf("%d\n",giant);

    bhau parat de temp + 1 + ops + longres + giant;
}

bhau lakshat thev branch_test(){
    bhau hai ahe val = 5;
    bhau jar(val > 0){
        bhau jar(val < 3){
            printf("Tiny\n");
        }
        bhau nahitar(val < 6){
            printf("Smallish\n");
        }
        bhau tar {
            printf("???\n");
        }
    }
    bhau tar {
        printf("Negative or Zero\n");
    }
}



bhau ithun chalu {
    printf(app_name);
    printf("==== Start Stress Test ====\n");
    
    bhau hai ahe res1 = math_ops(2,3,4);
    bhau hai ahe res2 = level1(5);
    
    bhau hai ahe res3 = call_chain(3);
    bhau hai ahe res4 = everything(4);
    
    
    printf("MathOps: "); printf("%d\n",res1);
    printf("Level1: "); printf("%d\n",res2);
    printf("CallChain: "); printf("%d\n",res3);
    printf("Everything Combo: "); printf("%d\n",res4);

    decision_tree(-10);
    decision_tree(0);
    decision_tree(5);
    decision_tree(50);
    decision_tree(500);

    multiple_assigns();
    scope_depth_test();
    giant_exprs();
    long_loop_chain();
    string_block();
    branch_test();
    

    printf("==== End Stress Test ====");
}

bye bhau

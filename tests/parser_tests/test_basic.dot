digraph AST {
  node [shape=box, style=filled, fillcolor=lightblue];
  node0 [label="PROGRAM"]
  node1 [label="EXTERN"]
  node2 [label="IDENT: printf"]
  node1 -> node2;
  node0 -> node1;
  node3 [label="EXTERN"]
  node4 [label="IDENT: strlen"]
  node3 -> node4;
  node0 -> node3;
  node5 [label="EXTERN"]
  node6 [label="IDENT: scanf"]
  node5 -> node6;
  node0 -> node5;
  node7 [label="ASSIGN: BL_EQUAL"]
  node8 [label="IDENT: global"]
  node7 -> node8;
  node9 [label="INT: 99"]
  node7 -> node9;
  node0 -> node7;
  node10 [label="ASSIGN: BL_EQUAL"]
  node11 [label="IDENT: pi"]
  node10 -> node11;
  node12 [label="FLOAT: 3.14"]
  node10 -> node12;
  node0 -> node10;
  node13 [label="ASSIGN: BL_EQUAL"]
  node14 [label="IDENT: name"]
  node13 -> node14;
  node15 [label="STRING: BhauLang Tester"]
  node13 -> node15;
  node0 -> node13;
  node16 [label="ASSIGN: BL_EQUAL"]
  node17 [label="IDENT: z"]
  node16 -> node17;
  node18 [label="INT: 42"]
  node16 -> node18;
  node0 -> node16;
  node19 [label="ASSIGN: BL_EQUAL"]
  node20 [label="IDENT: y"]
  node19 -> node20;
  node21 [label="INT: 42"]
  node19 -> node21;
  node0 -> node19;
  node22 [label="ASSIGN: BL_EQUAL"]
  node23 [label="IDENT: x"]
  node22 -> node23;
  node24 [label="INT: 42"]
  node22 -> node24;
  node0 -> node22;
  node25 [label="FUNCTION: complex"]
  node26 [label="IDENT: a"]
  node25 -> node26;
  node27 [label="IDENT: b"]
  node25 -> node27;
  node28 [label="IDENT: c"]
  node25 -> node28;
  node29 [label="BLOCK"]
  node30 [label="ASSIGN: BL_EQUAL"]
  node31 [label="IDENT: result"]
  node30 -> node31;
  node32 [label="INT: 0"]
  node30 -> node32;
  node29 -> node30;
  node33 [label="WHILE"]
  node34 [label="BINOP: BL_LESSTHAN"]
  node35 [label="IDENT: a"]
  node34 -> node35;
  node36 [label="BINOP: BL_ADDBINOP"]
  node37 [label="IDENT: b"]
  node36 -> node37;
  node38 [label="IDENT: c"]
  node36 -> node38;
  node34 -> node36;
  node33 -> node34;
  node39 [label="BLOCK"]
  node40 [label="ASSIGN: BL_EQUAL"]
  node41 [label="IDENT: i"]
  node40 -> node41;
  node42 [label="INT: 0"]
  node40 -> node42;
  node39 -> node40;
  node43 [label="WHILE"]
  node44 [label="BINOP: BL_LESSTHAN"]
  node45 [label="IDENT: i"]
  node44 -> node45;
  node46 [label="INT: 5"]
  node44 -> node46;
  node43 -> node44;
  node47 [label="BLOCK"]
  node48 [label="ASSIGN: BL_EQUAL"]
  node49 [label="IDENT: result"]
  node48 -> node49;
  node50 [label="BINOP: BL_ADDBINOP"]
  node51 [label="BINOP: BL_SUBBINOP"]
  node52 [label="BINOP: BL_ADDBINOP"]
  node53 [label="IDENT: result"]
  node52 -> node53;
  node54 [label="BINOP: BL_MULTBINOP"]
  node55 [label="IDENT: a"]
  node54 -> node55;
  node56 [label="IDENT: b"]
  node54 -> node56;
  node52 -> node54;
  node51 -> node52;
  node57 [label="IDENT: c"]
  node51 -> node57;
  node50 -> node51;
  node58 [label="IDENT: i"]
  node50 -> node58;
  node48 -> node50;
  node47 -> node48;
  node59 [label="ASSIGN: BL_EQUAL"]
  node60 [label="IDENT: i"]
  node59 -> node60;
  node61 [label="BINOP: BL_ADDBINOP"]
  node62 [label="IDENT: i"]
  node61 -> node62;
  node63 [label="INT: 1"]
  node61 -> node63;
  node59 -> node61;
  node47 -> node59;
  node43 -> node47;
  node39 -> node43;
  node64 [label="ASSIGN: BL_EQUAL"]
  node65 [label="IDENT: a"]
  node64 -> node65;
  node66 [label="BINOP: BL_ADDBINOP"]
  node67 [label="IDENT: a"]
  node66 -> node67;
  node68 [label="INT: 1"]
  node66 -> node68;
  node64 -> node66;
  node39 -> node64;
  node33 -> node39;
  node29 -> node33;
  node69 [label="IF_ELSE"]
  node70 [label="BINOP: BL_GRTTHAN"]
  node71 [label="IDENT: result"]
  node70 -> node71;
  node72 [label="INT: 100"]
  node70 -> node72;
  node69 -> node70;
  node73 [label="BLOCK"]
  node74 [label="RETURN"]
  node75 [label="IDENT: result"]
  node74 -> node75;
  node73 -> node74;
  node69 -> node73;
  node76 [label="IF_ELSE"]
  node77 [label="BINOP: BL_ISEQUALCOND"]
  node78 [label="IDENT: result"]
  node77 -> node78;
  node79 [label="INT: 100"]
  node77 -> node79;
  node76 -> node77;
  node80 [label="BLOCK"]
  node81 [label="RETURN"]
  node82 [label="BINOP: BL_ADDBINOP"]
  node83 [label="IDENT: result"]
  node82 -> node83;
  node84 [label="INT: 1"]
  node82 -> node84;
  node81 -> node82;
  node80 -> node81;
  node76 -> node80;
  node85 [label="BLOCK"]
  node86 [label="RETURN"]
  node87 [label="INT: 0"]
  node86 -> node87;
  node85 -> node86;
  node76 -> node85;
  node69 -> node76;
  node29 -> node69;
  node25 -> node29;
  node0 -> node25;
  node88 [label="FUNCTION: deeply_nested"]
  node89 [label="IDENT: n"]
  node88 -> node89;
  node90 [label="BLOCK"]
  node91 [label="ASSIGN: BL_EQUAL"]
  node92 [label="IDENT: temp"]
  node91 -> node92;
  node93 [label="INT: 1"]
  node91 -> node93;
  node90 -> node91;
  node94 [label="WHILE"]
  node95 [label="BINOP: BL_GRTTHAN"]
  node96 [label="IDENT: n"]
  node95 -> node96;
  node97 [label="INT: 0"]
  node95 -> node97;
  node94 -> node95;
  node98 [label="BLOCK"]
  node99 [label="IF_ELSE"]
  node100 [label="BINOP: BL_ISEQUALCOND"]
  node101 [label="BINOP: BL_MODBINOP"]
  node102 [label="IDENT: n"]
  node101 -> node102;
  node103 [label="INT: 2"]
  node101 -> node103;
  node100 -> node101;
  node104 [label="INT: 0"]
  node100 -> node104;
  node99 -> node100;
  node105 [label="BLOCK"]
  node106 [label="ASSIGN: BL_EQUAL"]
  node107 [label="IDENT: temp"]
  node106 -> node107;
  node108 [label="BINOP: BL_MULTBINOP"]
  node109 [label="IDENT: temp"]
  node108 -> node109;
  node110 [label="INT: 2"]
  node108 -> node110;
  node106 -> node108;
  node105 -> node106;
  node99 -> node105;
  node111 [label="IF_ELSE"]
  node112 [label="BINOP: BL_ISEQUALCOND"]
  node113 [label="BINOP: BL_MODBINOP"]
  node114 [label="IDENT: n"]
  node113 -> node114;
  node115 [label="INT: 3"]
  node113 -> node115;
  node112 -> node113;
  node116 [label="INT: 0"]
  node112 -> node116;
  node111 -> node112;
  node117 [label="BLOCK"]
  node118 [label="ASSIGN: BL_EQUAL"]
  node119 [label="IDENT: temp"]
  node118 -> node119;
  node120 [label="BINOP: BL_ADDBINOP"]
  node121 [label="IDENT: temp"]
  node120 -> node121;
  node122 [label="INT: 3"]
  node120 -> node122;
  node118 -> node120;
  node117 -> node118;
  node111 -> node117;
  node123 [label="BLOCK"]
  node124 [label="ASSIGN: BL_EQUAL"]
  node125 [label="IDENT: temp"]
  node124 -> node125;
  node126 [label="BINOP: BL_ADDBINOP"]
  node127 [label="IDENT: temp"]
  node126 -> node127;
  node128 [label="INT: 1"]
  node126 -> node128;
  node124 -> node126;
  node123 -> node124;
  node111 -> node123;
  node99 -> node111;
  node98 -> node99;
  node129 [label="ASSIGN: BL_EQUAL"]
  node130 [label="IDENT: n"]
  node129 -> node130;
  node131 [label="BINOP: BL_SUBBINOP"]
  node132 [label="IDENT: n"]
  node131 -> node132;
  node133 [label="INT: 1"]
  node131 -> node133;
  node129 -> node131;
  node98 -> node129;
  node94 -> node98;
  node90 -> node94;
  node134 [label="RETURN"]
  node135 [label="IDENT: temp"]
  node134 -> node135;
  node90 -> node134;
  node88 -> node90;
  node0 -> node88;
  node136 [label="FUNCTION: test_strings"]
  node137 [label="BLOCK"]
  node138 [label="ASSIGN: BL_EQUAL"]
  node139 [label="IDENT: str1"]
  node138 -> node139;
  node140 [label="STRING: Hello"]
  node138 -> node140;
  node137 -> node138;
  node141 [label="ASSIGN: BL_EQUAL"]
  node142 [label="IDENT: str2"]
  node141 -> node142;
  node143 [label="STRING: BhauLang"]
  node141 -> node143;
  node137 -> node141;
  node144 [label="ASSIGN: BL_EQUAL"]
  node145 [label="IDENT: full"]
  node144 -> node145;
  node146 [label="BINOP: BL_ADDBINOP"]
  node147 [label="BINOP: BL_ADDBINOP"]
  node148 [label="STRING: Hello"]
  node147 -> node148;
  node149 [label="STRING:  "]
  node147 -> node149;
  node146 -> node147;
  node150 [label="STRING: BhauLang"]
  node146 -> node150;
  node144 -> node146;
  node137 -> node144;
  node151 [label="CALL: printf"]
  node152 [label="STRING: Message: "]
  node151 -> node152;
  node137 -> node151;
  node153 [label="CALL: printf"]
  node154 [label="BINOP: BL_ADDBINOP"]
  node155 [label="BINOP: BL_ADDBINOP"]
  node156 [label="STRING: Hello"]
  node155 -> node156;
  node157 [label="STRING:  "]
  node155 -> node157;
  node154 -> node155;
  node158 [label="STRING: BhauLang"]
  node154 -> node158;
  node153 -> node154;
  node137 -> node153;
  node136 -> node137;
  node0 -> node136;
  node159 [label="FUNCTION: mega_recursive"]
  node160 [label="IDENT: x"]
  node159 -> node160;
  node161 [label="BLOCK"]
  node162 [label="IF_ELSE"]
  node163 [label="BINOP: BL_LESSEQ"]
  node164 [label="IDENT: x"]
  node163 -> node164;
  node165 [label="INT: 1"]
  node163 -> node165;
  node162 -> node163;
  node166 [label="BLOCK"]
  node167 [label="RETURN"]
  node168 [label="INT: 1"]
  node167 -> node168;
  node166 -> node167;
  node162 -> node166;
  node161 -> node162;
  node169 [label="RETURN"]
  node170 [label="BINOP: BL_MULTBINOP"]
  node171 [label="IDENT: x"]
  node170 -> node171;
  node172 [label="CALL: mega_recursive"]
  node173 [label="BINOP: BL_SUBBINOP"]
  node174 [label="IDENT: x"]
  node173 -> node174;
  node175 [label="INT: 1"]
  node173 -> node175;
  node172 -> node173;
  node170 -> node172;
  node169 -> node170;
  node161 -> node169;
  node159 -> node161;
  node0 -> node159;
  node176 [label="FUNCTION: nested_conditions"]
  node177 [label="IDENT: val"]
  node176 -> node177;
  node178 [label="BLOCK"]
  node179 [label="IF_ELSE"]
  node180 [label="BINOP: BL_GRTTHAN"]
  node181 [label="IDENT: val"]
  node180 -> node181;
  node182 [label="INT: 0"]
  node180 -> node182;
  node179 -> node180;
  node183 [label="BLOCK"]
  node184 [label="IF_ELSE"]
  node185 [label="BINOP: BL_LESSTHAN"]
  node186 [label="IDENT: val"]
  node185 -> node186;
  node187 [label="INT: 10"]
  node185 -> node187;
  node184 -> node185;
  node188 [label="BLOCK"]
  node189 [label="CALL: printf"]
  node190 [label="STRING: Single Digit Positive\n"]
  node189 -> node190;
  node188 -> node189;
  node184 -> node188;
  node191 [label="IF_ELSE"]
  node192 [label="BINOP: BL_LESSTHAN"]
  node193 [label="IDENT: val"]
  node192 -> node193;
  node194 [label="INT: 100"]
  node192 -> node194;
  node191 -> node192;
  node195 [label="BLOCK"]
  node196 [label="CALL: printf"]
  node197 [label="STRING: Two Digit Positive\n"]
  node196 -> node197;
  node195 -> node196;
  node191 -> node195;
  node198 [label="BLOCK"]
  node199 [label="CALL: printf"]
  node200 [label="STRING: Large Positive\n"]
  node199 -> node200;
  node198 -> node199;
  node191 -> node198;
  node184 -> node191;
  node183 -> node184;
  node179 -> node183;
  node201 [label="IF_ELSE"]
  node202 [label="BINOP: BL_LESSTHAN"]
  node203 [label="IDENT: val"]
  node202 -> node203;
  node204 [label="INT: 0"]
  node202 -> node204;
  node201 -> node202;
  node205 [label="BLOCK"]
  node206 [label="CALL: printf"]
  node207 [label="STRING: Negative\n"]
  node206 -> node207;
  node205 -> node206;
  node201 -> node205;
  node208 [label="BLOCK"]
  node209 [label="CALL: printf"]
  node210 [label="STRING: Zero\n"]
  node209 -> node210;
  node208 -> node209;
  node201 -> node208;
  node179 -> node201;
  node178 -> node179;
  node176 -> node178;
  node0 -> node176;
  node211 [label="FUNCTION: loop_fun"]
  node212 [label="BLOCK"]
  node213 [label="ASSIGN: BL_EQUAL"]
  node214 [label="IDENT: sum"]
  node213 -> node214;
  node215 [label="INT: 0"]
  node213 -> node215;
  node212 -> node213;
  node216 [label="ASSIGN: BL_EQUAL"]
  node217 [label="IDENT: i"]
  node216 -> node217;
  node218 [label="INT: 1"]
  node216 -> node218;
  node212 -> node216;
  node219 [label="WHILE"]
  node220 [label="BINOP: BL_LESSEQ"]
  node221 [label="IDENT: i"]
  node220 -> node221;
  node222 [label="INT: 10"]
  node220 -> node222;
  node219 -> node220;
  node223 [label="BLOCK"]
  node224 [label="ASSIGN: BL_EQUAL"]
  node225 [label="IDENT: sum"]
  node224 -> node225;
  node226 [label="BINOP: BL_ADDBINOP"]
  node227 [label="IDENT: sum"]
  node226 -> node227;
  node228 [label="IDENT: i"]
  node226 -> node228;
  node224 -> node226;
  node223 -> node224;
  node229 [label="ASSIGN: BL_EQUAL"]
  node230 [label="IDENT: i"]
  node229 -> node230;
  node231 [label="BINOP: BL_ADDBINOP"]
  node232 [label="IDENT: i"]
  node231 -> node232;
  node233 [label="INT: 1"]
  node231 -> node233;
  node229 -> node231;
  node223 -> node229;
  node219 -> node223;
  node212 -> node219;
  node234 [label="RETURN"]
  node235 [label="IDENT: sum"]
  node234 -> node235;
  node212 -> node234;
  node211 -> node212;
  node0 -> node211;
  node236 [label="FUNCTION: test_scope_shadowing"]
  node237 [label="BLOCK"]
  node238 [label="ASSIGN: BL_EQUAL"]
  node239 [label="IDENT: val"]
  node238 -> node239;
  node240 [label="INT: 5"]
  node238 -> node240;
  node237 -> node238;
  node241 [label="WHILE"]
  node242 [label="BINOP: BL_LESSTHAN"]
  node243 [label="IDENT: val"]
  node242 -> node243;
  node244 [label="INT: 10"]
  node242 -> node244;
  node241 -> node242;
  node245 [label="BLOCK"]
  node246 [label="ASSIGN: BL_EQUAL"]
  node247 [label="IDENT: val"]
  node246 -> node247;
  node248 [label="INT: 20"]
  node246 -> node248;
  node245 -> node246;
  node249 [label="ASSIGN: BL_EQUAL"]
  node250 [label="IDENT: val"]
  node249 -> node250;
  node251 [label="BINOP: BL_ADDBINOP"]
  node252 [label="IDENT: val"]
  node251 -> node252;
  node253 [label="INT: 1"]
  node251 -> node253;
  node249 -> node251;
  node245 -> node249;
  node254 [label="CALL: printf"]
  node255 [label="IDENT: val"]
  node254 -> node255;
  node245 -> node254;
  node256 [label="BREAK"]
  node245 -> node256;
  node241 -> node245;
  node237 -> node241;
  node257 [label="CALL: printf"]
  node258 [label="IDENT: val"]
  node257 -> node258;
  node237 -> node257;
  node236 -> node237;
  node0 -> node236;
  node259 [label="FUNCTION: test_big_exprs"]
  node260 [label="BLOCK"]
  node261 [label="ASSIGN: BL_EQUAL"]
  node262 [label="IDENT: a"]
  node261 -> node262;
  node263 [label="INT: 96"]
  node261 -> node263;
  node260 -> node261;
  node264 [label="ASSIGN: BL_EQUAL"]
  node265 [label="IDENT: b"]
  node264 -> node265;
  node266 [label="BINOP: BL_SUBBINOP"]
  node267 [label="BINOP: BL_ADDBINOP"]
  node268 [label="BINOP: BL_MULTBINOP"]
  node269 [label="IDENT: a"]
  node268 -> node269;
  node270 [label="IDENT: a"]
  node268 -> node270;
  node267 -> node268;
  node271 [label="IDENT: a"]
  node267 -> node271;
  node266 -> node267;
  node272 [label="INT: 47"]
  node266 -> node272;
  node264 -> node266;
  node260 -> node264;
  node273 [label="RETURN"]
  node274 [label="IDENT: b"]
  node273 -> node274;
  node260 -> node273;
  node259 -> node260;
  node0 -> node259;
  node275 [label="FUNCTION: empty_else"]
  node276 [label="IDENT: val"]
  node275 -> node276;
  node277 [label="BLOCK"]
  node278 [label="IF_ELSE"]
  node279 [label="BINOP: BL_ISEQUALCOND"]
  node280 [label="IDENT: val"]
  node279 -> node280;
  node281 [label="INT: 1"]
  node279 -> node281;
  node278 -> node279;
  node282 [label="BLOCK"]
  node283 [label="CALL: printf"]
  node284 [label="STRING: One\n"]
  node283 -> node284;
  node282 -> node283;
  node278 -> node282;
  node285 [label="BLOCK"]
  node278 -> node285;
  node277 -> node278;
  node275 -> node277;
  node0 -> node275;
  node286 [label="FUNCTION: test_all"]
  node287 [label="BLOCK"]
  node288 [label="CALL: printf"]
  node289 [label="STRING: Complex: "]
  node288 -> node289;
  node287 -> node288;
  node290 [label="CALL: printf"]
  node291 [label="CALL: complex"]
  node292 [label="INT: 1"]
  node291 -> node292;
  node293 [label="INT: 2"]
  node291 -> node293;
  node294 [label="INT: 3"]
  node291 -> node294;
  node290 -> node291;
  node287 -> node290;
  node295 [label="CALL: printf"]
  node296 [label="STRING: Deep: "]
  node295 -> node296;
  node287 -> node295;
  node297 [label="CALL: printf"]
  node298 [label="CALL: deeply_nested"]
  node299 [label="INT: 10"]
  node298 -> node299;
  node297 -> node298;
  node287 -> node297;
  node300 [label="CALL: test_strings"]
  node287 -> node300;
  node301 [label="CALL: printf"]
  node302 [label="STRING: Mega Recursive 5: "]
  node301 -> node302;
  node287 -> node301;
  node303 [label="CALL: printf"]
  node304 [label="CALL: mega_recursive"]
  node305 [label="INT: 5"]
  node304 -> node305;
  node303 -> node304;
  node287 -> node303;
  node306 [label="CALL: nested_conditions"]
  node307 [label="INT: 5"]
  node306 -> node307;
  node287 -> node306;
  node308 [label="CALL: nested_conditions"]
  node309 [label="INT: -5"]
  node308 -> node309;
  node287 -> node308;
  node310 [label="CALL: nested_conditions"]
  node311 [label="INT: 100"]
  node310 -> node311;
  node287 -> node310;
  node312 [label="CALL: printf"]
  node313 [label="STRING: Loop Fun: "]
  node312 -> node313;
  node287 -> node312;
  node314 [label="CALL: printf"]
  node315 [label="CALL: loop_fun"]
  node314 -> node315;
  node287 -> node314;
  node316 [label="CALL: test_scope_shadowing"]
  node287 -> node316;
  node317 [label="CALL: printf"]
  node318 [label="STRING: Big expr: "]
  node317 -> node318;
  node287 -> node317;
  node319 [label="CALL: printf"]
  node320 [label="CALL: test_big_exprs"]
  node319 -> node320;
  node287 -> node319;
  node321 [label="CALL: empty_else"]
  node322 [label="INT: 1"]
  node321 -> node322;
  node287 -> node321;
  node286 -> node287;
  node0 -> node286;
  node323 [label="MAIN"]
  node324 [label="BLOCK"]
  node325 [label="CALL: printf"]
  node326 [label="STRING: BhauLang Tester"]
  node325 -> node326;
  node324 -> node325;
  node327 [label="CALL: test_all"]
  node324 -> node327;
  node323 -> node324;
  node0 -> node323;
}

(null)└── PROGRAM
(null)    ├── EXTERN
(null)    │   └── IDENTIFIER: printf [global#1]
(null)    ├── ASSIGN DECL BL_EQUAL
(null)    │   ├── IDENTIFIER: pi [global#1]
(null)    │   └── FLOAT_LITERAL: 3.14
(null)    ├── ASSIGN DECL BL_EQUAL
(null)    │   ├── IDENTIFIER: e [global#1]
(null)    │   └── FLOAT_LITERAL: 2.72
(null)    ├── ASSIGN DECL BL_EQUAL
(null)    │   ├── IDENTIFIER: greeting [global#1]
(null)    │   └── STRING_LITERAL: "Hello from BhauLang!"
(null)    ├── ASSIGN DECL BL_EQUAL
(null)    │   ├── IDENTIFIER: flag [global#1]
(null)    │   └── INT_LITERAL: 1
(null)    ├── ASSIGN DECL BL_EQUAL
(null)    │   ├── IDENTIFIER: z [global#1]
(null)    │   └── INT_LITERAL: 10
(null)    ├── ASSIGN DECL BL_EQUAL
(null)    │   ├── IDENTIFIER: folded [global#1]
(null)    │   └── BINOP: BL_ADDBINOP
(null)    │       ├── INT_LITERAL: 2
(null)    │       └── BINOP: BL_MULTBINOP
(null)    │           ├── INT_LITERAL: 3
(null)    │           └── GROUP
(null)    │               └── BINOP: BL_SUBBINOP
(null)    │                   ├── INT_LITERAL: 4
(null)    │                   └── INT_LITERAL: 1
(null)    ├── ASSIGN DECL BL_EQUAL
(null)    │   ├── IDENTIFIER: x [global#1]
(null)    │   └── INT_LITERAL: 5
(null)    ├── ASSIGN DECL BL_EQUAL
(null)    │   ├── IDENTIFIER: a [global#1]
(null)    │   └── ASSIGN DECL BL_EQUAL
(null)    │       ├── IDENTIFIER: b [global#1]
(null)    │       └── ASSIGN DECL BL_EQUAL
(null)    │           ├── IDENTIFIER: c [global#1]
(null)    │           └── INT_LITERAL: 42
(null)    ├── FUNCTION: nested_conditions
(null)    │   ├── PARAMS
(null)    │   └── PARAM: nested_conditions
(null)    │       └── IDENTIFIER: n [nested_conditions#2]
(null)    │   └── BLOCK
(null)    │   └── BLOCK
(null)    │       └── IF_ELSE
(null)    │           ├── CONDITION
(null)    │           ├── BINOP: BL_ISEQUALCOND
(null)    │           │   ├── IDENTIFIER: n [nested_conditions#2]
(null)    │           │   └── INT_LITERAL: 0
(null)    │           ├── IF BLOCK
(null)    │           ├── BLOCK
(null)    │           │   └── FUNCTION CALL: printf
(null)    │           │       └── STRING_LITERAL: "Zero\n"
(null)    │           └── ELSE BLOCK
(null)    │           └── IF_ELSE
(null)    │               ├── CONDITION
(null)    │               ├── BINOP: BL_LESSTHAN
(null)    │               │   ├── IDENTIFIER: n [nested_conditions#2]
(null)    │               │   └── INT_LITERAL: 0
(null)    │               ├── IF BLOCK
(null)    │               ├── BLOCK
(null)    │               │   └── FUNCTION CALL: printf
(null)    │               │       └── STRING_LITERAL: "Negative\n"
(null)    │               └── ELSE BLOCK
(null)    │               └── BLOCK
(null)    │                   ├── FUNCTION CALL: printf
(null)    │                   │   └── STRING_LITERAL: "Positive\n"
(null)    │                   └── IF_ELSE
(null)    │                       ├── CONDITION
(null)    │                       ├── BINOP: BL_GRTTHAN
(null)    │                       │   ├── IDENTIFIER: n [(null)#5]
(null)    │                       │   └── INT_LITERAL: 100
(null)    │                       ├── IF BLOCK
(null)    │                       ├── BLOCK
(null)    │                       │   └── FUNCTION CALL: printf
(null)    │                       │       └── STRING_LITERAL: "Very large\n"
(null)    │                       └── ELSE BLOCK
(null)    │                       └── (null node)
(null)    ├── FUNCTION: switch_demo
(null)    │   ├── PARAMS
(null)    │   └── PARAM: switch_demo
(null)    │       └── IDENTIFIER: x [switch_demo#7]
(null)    │   └── BLOCK
(null)    │   └── BLOCK
(null)    │       └── SWITCH
(null)    │           ├── EXPR
(null)    │           ├── IDENTIFIER: x [(null)#8]
(null)    │           ├── CASES
(null)    │           ├── CASE
(null)    │           │   ├── VALUE
(null)    │           │   ├── INT_LITERAL: 1
(null)    │           │   └── FUNCTION CALL: printf
(null)    │           │       └── STRING_LITERAL: "One\n"
(null)    │           ├── CASE
(null)    │           │   ├── VALUE
(null)    │           │   ├── INT_LITERAL: 2
(null)    │           │   └── FUNCTION CALL: printf
(null)    │           │       └── STRING_LITERAL: "Two\n"
(null)    │           └── CASE
(null)    │               ├── VALUE
(null)    │               ├── INT_LITERAL: 3
(null)    │               └── FUNCTION CALL: printf
(null)    │                   └── STRING_LITERAL: "Three\n"
(null)    │           └── DEFAULT
(null)    │           └── DEFAULT
(null)    │               └── FUNCTION CALL: printf
(null)    │                   └── STRING_LITERAL: "Other\n"
(null)    ├── FUNCTION: nested_loops
(null)    │   ├── PARAMS
(null)    │   └── BLOCK
(null)    │   └── BLOCK
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: i [nested_loops#9]
(null)    │       │   └── INT_LITERAL: 0
(null)    │       └── WHILE
(null)    │           ├── EXPR
(null)    │           ├── BINOP: BL_LESSTHAN
(null)    │           │   ├── IDENTIFIER: i [nested_loops#9]
(null)    │           │   └── INT_LITERAL: 5
(null)    │           └── BLOCK
(null)    │           └── BLOCK
(null)    │               ├── ASSIGN DECL BL_EQUAL
(null)    │               │   ├── IDENTIFIER: j [(null)#10]
(null)    │               │   └── INT_LITERAL: 0
(null)    │               ├── WHILE
(null)    │               │   ├── EXPR
(null)    │               │   ├── BINOP: BL_LESSTHAN
(null)    │               │   │   ├── IDENTIFIER: j [(null)#10]
(null)    │               │   │   └── INT_LITERAL: 3
(null)    │               │   └── BLOCK
(null)    │               │   └── BLOCK
(null)    │               │       ├── FUNCTION CALL: printf
(null)    │               │       │   ├── STRING_LITERAL: "%d "
(null)    │               │       │   └── IDENTIFIER: i [(null)#11]
(null)    │               │       ├── FUNCTION CALL: printf
(null)    │               │       │   ├── STRING_LITERAL: "%d "
(null)    │               │       │   └── IDENTIFIER: j [(null)#11]
(null)    │               │       └── ASSIGN BL_EQUAL
(null)    │               │           ├── IDENTIFIER: j [(null)#11]
(null)    │               │           └── BINOP: BL_ADDBINOP
(null)    │               │               ├── IDENTIFIER: j [(null)#11]
(null)    │               │               └── INT_LITERAL: 1
(null)    │               ├── FUNCTION CALL: printf
(null)    │               │   └── STRING_LITERAL: "\n"
(null)    │               └── ASSIGN BL_EQUAL
(null)    │                   ├── IDENTIFIER: i [(null)#10]
(null)    │                   └── BINOP: BL_ADDBINOP
(null)    │                       ├── IDENTIFIER: i [(null)#10]
(null)    │                       └── INT_LITERAL: 1
(null)    ├── FUNCTION: add_const
(null)    │   ├── PARAMS
(null)    │   └── BLOCK
(null)    │   └── BLOCK
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: a [add_const#12]
(null)    │       │   └── INT_LITERAL: 5
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: b [add_const#12]
(null)    │       │   └── INT_LITERAL: 10
(null)    │       └── RETURN
(null)    │           └── BINOP: BL_ADDBINOP
(null)    │               ├── IDENTIFIER: a [add_const#12]
(null)    │               └── IDENTIFIER: b [add_const#12]
(null)    ├── FUNCTION: counter_test
(null)    │   ├── PARAMS
(null)    │   └── BLOCK
(null)    │   └── BLOCK
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: counter [counter_test#13]
(null)    │       │   └── INT_LITERAL: 0
(null)    │       ├── WHILE
(null)    │       │   ├── EXPR
(null)    │       │   ├── BINOP: BL_LESSTHAN
(null)    │       │   │   ├── IDENTIFIER: counter [counter_test#13]
(null)    │       │   │   └── INT_LITERAL: 3
(null)    │       │   └── BLOCK
(null)    │       │   └── BLOCK
(null)    │       │       ├── FUNCTION CALL: printf
(null)    │       │       │   └── STRING_LITERAL: "Counting"
(null)    │       │       ├── FUNCTION CALL: printf
(null)    │       │       │   ├── STRING_LITERAL: " %d "
(null)    │       │       │   └── IDENTIFIER: counter [(null)#14]
(null)    │       │       └── ASSIGN BL_EQUAL
(null)    │       │           ├── IDENTIFIER: counter [(null)#14]
(null)    │       │           └── BINOP: BL_ADDBINOP
(null)    │       │               ├── IDENTIFIER: counter [(null)#14]
(null)    │       │               └── INT_LITERAL: 1
(null)    │       ├── FUNCTION CALL: printf
(null)    │       │   └── STRING_LITERAL: "\n"
(null)    │       └── RETURN
(null)    │           └── IDENTIFIER: counter [counter_test#13]
(null)    ├── FUNCTION: power
(null)    │   ├── PARAMS
(null)    │   ├── PARAM: power
(null)    │   │   └── IDENTIFIER: x [power#15]
(null)    │   └── PARAM: power
(null)    │       └── IDENTIFIER: n [power#15]
(null)    │   └── BLOCK
(null)    │   └── BLOCK
(null)    │       ├── IF_ELSE
(null)    │       │   ├── CONDITION
(null)    │       │   ├── BINOP: BL_ISEQUALCOND
(null)    │       │   │   ├── IDENTIFIER: n [power#15]
(null)    │       │   │   └── INT_LITERAL: 0
(null)    │       │   ├── IF BLOCK
(null)    │       │   ├── BLOCK
(null)    │       │   │   └── RETURN
(null)    │       │   │       └── INT_LITERAL: 1
(null)    │       │   └── ELSE BLOCK
(null)    │       │   └── (null node)
(null)    │       └── RETURN
(null)    │           └── BINOP: BL_MULTBINOP
(null)    │               ├── IDENTIFIER: x [power#15]
(null)    │               └── FUNCTION CALL: power
(null)    │                   ├── IDENTIFIER: x [power#15]
(null)    │                   └── BINOP: BL_SUBBINOP
(null)    │                       ├── IDENTIFIER: n [power#15]
(null)    │                       └── INT_LITERAL: 1
(null)    ├── FUNCTION: dummy
(null)    │   ├── PARAMS
(null)    │   ├── PARAM: dummy
(null)    │   │   └── IDENTIFIER: a [dummy#17]
(null)    │   ├── PARAM: dummy
(null)    │   │   └── IDENTIFIER: b [dummy#17]
(null)    │   └── PARAM: dummy
(null)    │       └── IDENTIFIER: c [dummy#17]
(null)    │   └── BLOCK
(null)    │   └── BLOCK
(null)    │       └── RETURN
(null)    │           └── BINOP: BL_ADDBINOP
(null)    │               ├── BINOP: BL_ADDBINOP
(null)    │               │   ├── IDENTIFIER: a [dummy#17]
(null)    │               │   └── IDENTIFIER: b [dummy#17]
(null)    │               └── IDENTIFIER: c [dummy#17]
(null)    ├── FUNCTION: literal_demo
(null)    │   ├── PARAMS
(null)    │   └── BLOCK
(null)    │   └── BLOCK
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: ch [literal_demo#18]
(null)    │       │   └── CHAR_LITERAL: b
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: s [literal_demo#18]
(null)    │       │   └── STRING_LITERAL: "string test"
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: pi_val [literal_demo#18]
(null)    │       │   └── FLOAT_LITERAL: 3.14
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: is_bhau [literal_demo#18]
(null)    │       │   └── INT_LITERAL: 1
(null)    │       ├── FUNCTION CALL: printf
(null)    │       │   ├── STRING_LITERAL: "%c\n"
(null)    │       │   └── IDENTIFIER: ch [literal_demo#18]
(null)    │       ├── FUNCTION CALL: printf
(null)    │       │   ├── STRING_LITERAL: "%s\n"
(null)    │       │   └── IDENTIFIER: s [literal_demo#18]
(null)    │       ├── FUNCTION CALL: printf
(null)    │       │   ├── STRING_LITERAL: "%.2f\n"
(null)    │       │   └── IDENTIFIER: pi_val [literal_demo#18]
(null)    │       └── FUNCTION CALL: printf
(null)    │           ├── STRING_LITERAL: "%d\n"
(null)    │           └── IDENTIFIER: is_bhau [literal_demo#18]
(null)    └── MAIN FUNCTION
(null)        └── BLOCK
(null)            ├── ASSIGN DECL BL_EQUAL
(null)            │   ├── IDENTIFIER: final [main#19]
(null)            │   └── FUNCTION CALL: dummy
(null)            │       ├── INT_LITERAL: 1
(null)            │       ├── INT_LITERAL: 2
(null)            │       └── INT_LITERAL: 3
(null)            ├── ASSIGN DECL BL_EQUAL
(null)            │   ├── IDENTIFIER: power [main#19]
(null)            │   └── FUNCTION CALL: power
(null)            │       ├── INT_LITERAL: 3
(null)            │       └── INT_LITERAL: 3
(null)            ├── FUNCTION CALL: printf
(null)            │   ├── STRING_LITERAL: "%s\n"
(null)            │   └── IDENTIFIER: greeting [main#19]
(null)            ├── FUNCTION CALL: printf
(null)            │   ├── STRING_LITERAL: "Power : %d\n"
(null)            │   └── IDENTIFIER: power [main#19]
(null)            ├── FUNCTION CALL: printf
(null)            │   ├── STRING_LITERAL: "%d\n"
(null)            │   └── IDENTIFIER: folded [main#19]
(null)            ├── FUNCTION CALL: nested_conditions
(null)            │   └── INT_LITERAL: 42
(null)            ├── FUNCTION CALL: switch_demo
(null)            │   └── INT_LITERAL: 3
(null)            ├── FUNCTION CALL: nested_loops
(null)            ├── ASSIGN DECL BL_EQUAL
(null)            │   ├── IDENTIFIER: res [main#19]
(null)            │   └── FUNCTION CALL: add_const
(null)            ├── FUNCTION CALL: printf
(null)            │   ├── STRING_LITERAL: "%d\n"
(null)            │   └── IDENTIFIER: res [main#19]
(null)            ├── ASSIGN DECL BL_EQUAL
(null)            │   ├── IDENTIFIER: ct [main#19]
(null)            │   └── FUNCTION CALL: counter_test
(null)            ├── FUNCTION CALL: printf
(null)            │   ├── STRING_LITERAL: "%d\n"
(null)            │   └── IDENTIFIER: ct [main#19]
(null)            ├── FUNCTION CALL: literal_demo
(null)            └── FUNCTION CALL: printf
(null)                ├── STRING_LITERAL: "%d\n"
(null)                └── IDENTIFIER: final [main#19]


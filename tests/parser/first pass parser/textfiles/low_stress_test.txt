(null)└── PROGRAM
(null)    ├── EXTERN
(null)    │   └── IDENTIFIER: printf [global#1]
(null)    ├── EXTERN
(null)    │   └── IDENTIFIER: strlen [global#1]
(null)    ├── EXTERN
(null)    │   └── IDENTIFIER: scanf [global#1]
(null)    ├── ASSIGN DECL BL_EQUAL
(null)    │   ├── IDENTIFIER: global [global#1]
(null)    │   └── INT_LITERAL: 99
(null)    ├── ASSIGN DECL BL_EQUAL
(null)    │   ├── IDENTIFIER: pi [global#1]
(null)    │   └── FLOAT_LITERAL: 3.14
(null)    ├── ASSIGN DECL BL_EQUAL
(null)    │   ├── IDENTIFIER: name [global#1]
(null)    │   └── STRING_LITERAL: "BhauLang Tester"
(null)    ├── ASSIGN DECL BL_EQUAL
(null)    │   ├── IDENTIFIER: x [global#1]
(null)    │   └── ASSIGN DECL BL_EQUAL
(null)    │       ├── IDENTIFIER: y [global#1]
(null)    │       └── ASSIGN DECL BL_EQUAL
(null)    │           ├── IDENTIFIER: z [global#1]
(null)    │           └── INT_LITERAL: 42
(null)    ├── FUNCTION: complex
(null)    │   ├── PARAMS
(null)    │   ├── PARAM: complex
(null)    │   │   └── IDENTIFIER: a [complex#2]
(null)    │   ├── PARAM: complex
(null)    │   │   └── IDENTIFIER: b [complex#2]
(null)    │   └── PARAM: complex
(null)    │       └── IDENTIFIER: c [complex#2]
(null)    │   └── BLOCK
(null)    │   └── BLOCK
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: result [complex#2]
(null)    │       │   └── INT_LITERAL: 0
(null)    │       ├── WHILE
(null)    │       │   ├── EXPR
(null)    │       │   ├── BINOP: BL_LESSTHAN
(null)    │       │   │   ├── IDENTIFIER: a [complex#2]
(null)    │       │   │   └── GROUP
(null)    │       │   │       └── BINOP: BL_ADDBINOP
(null)    │       │   │           ├── IDENTIFIER: b [complex#2]
(null)    │       │   │           └── IDENTIFIER: c [complex#2]
(null)    │       │   └── BLOCK
(null)    │       │   └── BLOCK
(null)    │       │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │       │   ├── IDENTIFIER: i [(null)#3]
(null)    │       │       │   └── INT_LITERAL: 0
(null)    │       │       ├── WHILE
(null)    │       │       │   ├── EXPR
(null)    │       │       │   ├── BINOP: BL_LESSTHAN
(null)    │       │       │   │   ├── IDENTIFIER: i [(null)#3]
(null)    │       │       │   │   └── INT_LITERAL: 5
(null)    │       │       │   └── BLOCK
(null)    │       │       │   └── BLOCK
(null)    │       │       │       ├── ASSIGN BL_EQUAL
(null)    │       │       │       │   ├── IDENTIFIER: result [(null)#4]
(null)    │       │       │       │   └── BINOP: BL_ADDBINOP
(null)    │       │       │       │       ├── BINOP: BL_SUBBINOP
(null)    │       │       │       │       │   ├── BINOP: BL_ADDBINOP
(null)    │       │       │       │       │   │   ├── IDENTIFIER: result [(null)#4]
(null)    │       │       │       │       │   │   └── BINOP: BL_MULTBINOP
(null)    │       │       │       │       │   │       ├── IDENTIFIER: a [(null)#4]
(null)    │       │       │       │       │   │       └── IDENTIFIER: b [(null)#4]
(null)    │       │       │       │       │   └── IDENTIFIER: c [(null)#4]
(null)    │       │       │       │       └── IDENTIFIER: i [(null)#4]
(null)    │       │       │       └── ASSIGN BL_EQUAL
(null)    │       │       │           ├── IDENTIFIER: i [(null)#4]
(null)    │       │       │           └── BINOP: BL_ADDBINOP
(null)    │       │       │               ├── IDENTIFIER: i [(null)#4]
(null)    │       │       │               └── INT_LITERAL: 1
(null)    │       │       └── ASSIGN BL_EQUAL
(null)    │       │           ├── IDENTIFIER: a [(null)#3]
(null)    │       │           └── BINOP: BL_ADDBINOP
(null)    │       │               ├── IDENTIFIER: a [(null)#3]
(null)    │       │               └── INT_LITERAL: 1
(null)    │       └── IF_ELSE
(null)    │           ├── CONDITION
(null)    │           ├── BINOP: BL_GRTTHAN
(null)    │           │   ├── IDENTIFIER: result [complex#2]
(null)    │           │   └── INT_LITERAL: 100
(null)    │           ├── IF BLOCK
(null)    │           ├── BLOCK
(null)    │           │   └── RETURN
(null)    │           │       └── IDENTIFIER: result [(null)#5]
(null)    │           └── ELSE BLOCK
(null)    │           └── IF_ELSE
(null)    │               ├── CONDITION
(null)    │               ├── BINOP: BL_ISEQUALCOND
(null)    │               │   ├── IDENTIFIER: result [complex#2]
(null)    │               │   └── INT_LITERAL: 100
(null)    │               ├── IF BLOCK
(null)    │               ├── BLOCK
(null)    │               │   └── RETURN
(null)    │               │       └── BINOP: BL_ADDBINOP
(null)    │               │           ├── IDENTIFIER: result [(null)#6]
(null)    │               │           └── INT_LITERAL: 1
(null)    │               └── ELSE BLOCK
(null)    │               └── BLOCK
(null)    │                   └── RETURN
(null)    │                       └── INT_LITERAL: 0
(null)    ├── FUNCTION: deeply_nested
(null)    │   ├── PARAMS
(null)    │   └── PARAM: deeply_nested
(null)    │       └── IDENTIFIER: n [deeply_nested#8]
(null)    │   └── BLOCK
(null)    │   └── BLOCK
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: temp [deeply_nested#8]
(null)    │       │   └── INT_LITERAL: 1
(null)    │       ├── WHILE
(null)    │       │   ├── EXPR
(null)    │       │   ├── BINOP: BL_GRTTHAN
(null)    │       │   │   ├── IDENTIFIER: n [deeply_nested#8]
(null)    │       │   │   └── INT_LITERAL: 0
(null)    │       │   └── BLOCK
(null)    │       │   └── BLOCK
(null)    │       │       ├── IF_ELSE
(null)    │       │       │   ├── CONDITION
(null)    │       │       │   ├── BINOP: BL_ISEQUALCOND
(null)    │       │       │   │   ├── BINOP: BL_MODBINOP
(null)    │       │       │   │   │   ├── IDENTIFIER: n [(null)#9]
(null)    │       │       │   │   │   └── INT_LITERAL: 2
(null)    │       │       │   │   └── INT_LITERAL: 0
(null)    │       │       │   ├── IF BLOCK
(null)    │       │       │   ├── BLOCK
(null)    │       │       │   │   └── ASSIGN BL_EQUAL
(null)    │       │       │   │       ├── IDENTIFIER: temp [(null)#10]
(null)    │       │       │   │       └── BINOP: BL_MULTBINOP
(null)    │       │       │   │           ├── IDENTIFIER: temp [(null)#10]
(null)    │       │       │   │           └── INT_LITERAL: 2
(null)    │       │       │   └── ELSE BLOCK
(null)    │       │       │   └── IF_ELSE
(null)    │       │       │       ├── CONDITION
(null)    │       │       │       ├── BINOP: BL_ISEQUALCOND
(null)    │       │       │       │   ├── BINOP: BL_MODBINOP
(null)    │       │       │       │   │   ├── IDENTIFIER: n [(null)#9]
(null)    │       │       │       │   │   └── INT_LITERAL: 3
(null)    │       │       │       │   └── INT_LITERAL: 0
(null)    │       │       │       ├── IF BLOCK
(null)    │       │       │       ├── BLOCK
(null)    │       │       │       │   └── ASSIGN BL_EQUAL
(null)    │       │       │       │       ├── IDENTIFIER: temp [(null)#11]
(null)    │       │       │       │       └── BINOP: BL_ADDBINOP
(null)    │       │       │       │           ├── IDENTIFIER: temp [(null)#11]
(null)    │       │       │       │           └── INT_LITERAL: 3
(null)    │       │       │       └── ELSE BLOCK
(null)    │       │       │       └── BLOCK
(null)    │       │       │           └── ASSIGN BL_EQUAL
(null)    │       │       │               ├── IDENTIFIER: temp [(null)#12]
(null)    │       │       │               └── BINOP: BL_ADDBINOP
(null)    │       │       │                   ├── IDENTIFIER: temp [(null)#12]
(null)    │       │       │                   └── INT_LITERAL: 1
(null)    │       │       └── ASSIGN BL_EQUAL
(null)    │       │           ├── IDENTIFIER: n [(null)#9]
(null)    │       │           └── BINOP: BL_SUBBINOP
(null)    │       │               ├── IDENTIFIER: n [(null)#9]
(null)    │       │               └── INT_LITERAL: 1
(null)    │       └── RETURN
(null)    │           └── IDENTIFIER: temp [deeply_nested#8]
(null)    ├── FUNCTION: test_strings
(null)    │   ├── PARAMS
(null)    │   └── BLOCK
(null)    │   └── BLOCK
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: str1 [test_strings#13]
(null)    │       │   └── STRING_LITERAL: "Hello"
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: str2 [test_strings#13]
(null)    │       │   └── STRING_LITERAL: "BhauLang"
(null)    │       ├── FUNCTION CALL: printf
(null)    │       │   └── STRING_LITERAL: "Message: "
(null)    │       └── FUNCTION CALL: printf
(null)    │           ├── STRING_LITERAL: "%s\n"
(null)    │           └── IDENTIFIER: str2 [test_strings#13]
(null)    ├── FUNCTION: mega_recursive
(null)    │   ├── PARAMS
(null)    │   └── PARAM: mega_recursive
(null)    │       └── IDENTIFIER: x [mega_recursive#14]
(null)    │   └── BLOCK
(null)    │   └── BLOCK
(null)    │       ├── IF_ELSE
(null)    │       │   ├── CONDITION
(null)    │       │   ├── BINOP: BL_LESSEQ
(null)    │       │   │   ├── IDENTIFIER: x [mega_recursive#14]
(null)    │       │   │   └── INT_LITERAL: 1
(null)    │       │   ├── IF BLOCK
(null)    │       │   ├── BLOCK
(null)    │       │   │   └── RETURN
(null)    │       │   │       └── INT_LITERAL: 1
(null)    │       │   └── ELSE BLOCK
(null)    │       │   └── (null node)
(null)    │       └── RETURN
(null)    │           └── BINOP: BL_MULTBINOP
(null)    │               ├── IDENTIFIER: x [mega_recursive#14]
(null)    │               └── FUNCTION CALL: mega_recursive
(null)    │                   └── BINOP: BL_SUBBINOP
(null)    │                       ├── IDENTIFIER: x [mega_recursive#14]
(null)    │                       └── INT_LITERAL: 1
(null)    ├── FUNCTION: nested_conditions
(null)    │   ├── PARAMS
(null)    │   └── PARAM: nested_conditions
(null)    │       └── IDENTIFIER: val [nested_conditions#16]
(null)    │   └── BLOCK
(null)    │   └── BLOCK
(null)    │       └── IF_ELSE
(null)    │           ├── CONDITION
(null)    │           ├── BINOP: BL_GRTTHAN
(null)    │           │   ├── IDENTIFIER: val [nested_conditions#16]
(null)    │           │   └── INT_LITERAL: 0
(null)    │           ├── IF BLOCK
(null)    │           ├── BLOCK
(null)    │           │   └── IF_ELSE
(null)    │           │       ├── CONDITION
(null)    │           │       ├── BINOP: BL_LESSTHAN
(null)    │           │       │   ├── IDENTIFIER: val [(null)#17]
(null)    │           │       │   └── INT_LITERAL: 10
(null)    │           │       ├── IF BLOCK
(null)    │           │       ├── BLOCK
(null)    │           │       │   └── FUNCTION CALL: printf
(null)    │           │       │       └── STRING_LITERAL: "Single Digit Positive\n"
(null)    │           │       └── ELSE BLOCK
(null)    │           │       └── IF_ELSE
(null)    │           │           ├── CONDITION
(null)    │           │           ├── BINOP: BL_LESSTHAN
(null)    │           │           │   ├── IDENTIFIER: val [(null)#17]
(null)    │           │           │   └── INT_LITERAL: 100
(null)    │           │           ├── IF BLOCK
(null)    │           │           ├── BLOCK
(null)    │           │           │   └── FUNCTION CALL: printf
(null)    │           │           │       └── STRING_LITERAL: "Two Digit Positive\n"
(null)    │           │           └── ELSE BLOCK
(null)    │           │           └── BLOCK
(null)    │           │               └── FUNCTION CALL: printf
(null)    │           │                   └── STRING_LITERAL: "Large Positive\n"
(null)    │           └── ELSE BLOCK
(null)    │           └── IF_ELSE
(null)    │               ├── CONDITION
(null)    │               ├── BINOP: BL_LESSTHAN
(null)    │               │   ├── IDENTIFIER: val [nested_conditions#16]
(null)    │               │   └── INT_LITERAL: 0
(null)    │               ├── IF BLOCK
(null)    │               ├── BLOCK
(null)    │               │   └── FUNCTION CALL: printf
(null)    │               │       └── STRING_LITERAL: "Negative\n"
(null)    │               └── ELSE BLOCK
(null)    │               └── BLOCK
(null)    │                   └── FUNCTION CALL: printf
(null)    │                       └── STRING_LITERAL: "Zero\n"
(null)    ├── FUNCTION: loop_fun
(null)    │   ├── PARAMS
(null)    │   └── BLOCK
(null)    │   └── BLOCK
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: sum [loop_fun#23]
(null)    │       │   └── INT_LITERAL: 0
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: i [loop_fun#23]
(null)    │       │   └── INT_LITERAL: 1
(null)    │       ├── WHILE
(null)    │       │   ├── EXPR
(null)    │       │   ├── BINOP: BL_LESSEQ
(null)    │       │   │   ├── IDENTIFIER: i [loop_fun#23]
(null)    │       │   │   └── INT_LITERAL: 10
(null)    │       │   └── BLOCK
(null)    │       │   └── BLOCK
(null)    │       │       ├── ASSIGN BL_EQUAL
(null)    │       │       │   ├── IDENTIFIER: sum [(null)#24]
(null)    │       │       │   └── BINOP: BL_ADDBINOP
(null)    │       │       │       ├── IDENTIFIER: sum [(null)#24]
(null)    │       │       │       └── IDENTIFIER: i [(null)#24]
(null)    │       │       └── ASSIGN BL_EQUAL
(null)    │       │           ├── IDENTIFIER: i [(null)#24]
(null)    │       │           └── BINOP: BL_ADDBINOP
(null)    │       │               ├── IDENTIFIER: i [(null)#24]
(null)    │       │               └── INT_LITERAL: 1
(null)    │       └── RETURN
(null)    │           └── IDENTIFIER: sum [loop_fun#23]
(null)    ├── FUNCTION: test_scope_shadowing
(null)    │   ├── PARAMS
(null)    │   └── BLOCK
(null)    │   └── BLOCK
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: val [test_scope_shadowing#25]
(null)    │       │   └── INT_LITERAL: 5
(null)    │       ├── WHILE
(null)    │       │   ├── EXPR
(null)    │       │   ├── BINOP: BL_LESSTHAN
(null)    │       │   │   ├── IDENTIFIER: val [test_scope_shadowing#25]
(null)    │       │   │   └── INT_LITERAL: 10
(null)    │       │   └── BLOCK
(null)    │       │   └── BLOCK
(null)    │       │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │       │   ├── IDENTIFIER: val [(null)#26]
(null)    │       │       │   └── INT_LITERAL: 20
(null)    │       │       ├── ASSIGN BL_EQUAL
(null)    │       │       │   ├── IDENTIFIER: val [(null)#26]
(null)    │       │       │   └── BINOP: BL_ADDBINOP
(null)    │       │       │       ├── IDENTIFIER: val [(null)#26]
(null)    │       │       │       └── INT_LITERAL: 1
(null)    │       │       ├── FUNCTION CALL: printf
(null)    │       │       │   ├── STRING_LITERAL: "%d\n"
(null)    │       │       │   └── IDENTIFIER: val [(null)#26]
(null)    │       │       └── BREAK
(null)    │       └── FUNCTION CALL: printf
(null)    │           ├── STRING_LITERAL: "%d\n"
(null)    │           └── IDENTIFIER: val [test_scope_shadowing#25]
(null)    ├── FUNCTION: test_big_exprs
(null)    │   ├── PARAMS
(null)    │   └── BLOCK
(null)    │   └── BLOCK
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: a [test_big_exprs#27]
(null)    │       │   └── BINOP: BL_ADDBINOP
(null)    │       │       ├── BINOP: BL_SUBBINOP
(null)    │       │       │   ├── BINOP: BL_ADDBINOP
(null)    │       │       │   │   ├── BINOP: BL_ADDBINOP
(null)    │       │       │   │   │   ├── INT_LITERAL: 1
(null)    │       │       │   │   │   └── BINOP: BL_MULTBINOP
(null)    │       │       │   │   │       ├── INT_LITERAL: 2
(null)    │       │       │   │   │       └── INT_LITERAL: 3
(null)    │       │       │   │   └── INT_LITERAL: 4
(null)    │       │       │   └── INT_LITERAL: 5
(null)    │       │       └── BINOP: BL_MULTBINOP
(null)    │       │           ├── INT_LITERAL: 6
(null)    │       │           └── GROUP
(null)    │       │               └── BINOP: BL_ADDBINOP
(null)    │       │                   ├── INT_LITERAL: 7
(null)    │       │                   └── INT_LITERAL: 8
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: b [test_big_exprs#27]
(null)    │       │   └── BINOP: BL_SUBBINOP
(null)    │       │       ├── BINOP: BL_ADDBINOP
(null)    │       │       │   ├── BINOP: BL_MULTBINOP
(null)    │       │       │   │   ├── IDENTIFIER: a [test_big_exprs#27]
(null)    │       │       │   │   └── IDENTIFIER: a [test_big_exprs#27]
(null)    │       │       │   └── IDENTIFIER: a [test_big_exprs#27]
(null)    │       │       └── GROUP
(null)    │       │           └── BINOP: BL_ADDBINOP
(null)    │       │               ├── INT_LITERAL: 3
(null)    │       │               └── BINOP: BL_MULTBINOP
(null)    │       │                   ├── INT_LITERAL: 4
(null)    │       │                   └── GROUP
(null)    │       │                       └── BINOP: BL_ADDBINOP
(null)    │       │                           ├── INT_LITERAL: 5
(null)    │       │                           └── INT_LITERAL: 6
(null)    │       └── RETURN
(null)    │           └── IDENTIFIER: b [test_big_exprs#27]
(null)    ├── FUNCTION: empty_else
(null)    │   ├── PARAMS
(null)    │   └── PARAM: empty_else
(null)    │       └── IDENTIFIER: val [empty_else#28]
(null)    │   └── BLOCK
(null)    │   └── BLOCK
(null)    │       └── IF_ELSE
(null)    │           ├── CONDITION
(null)    │           ├── BINOP: BL_ISEQUALCOND
(null)    │           │   ├── IDENTIFIER: val [empty_else#28]
(null)    │           │   └── INT_LITERAL: 1
(null)    │           ├── IF BLOCK
(null)    │           ├── BLOCK
(null)    │           │   └── FUNCTION CALL: printf
(null)    │           │       └── STRING_LITERAL: "One\n"
(null)    │           └── ELSE BLOCK
(null)    │           └── BLOCK
(null)    ├── FUNCTION: test_all
(null)    │   ├── PARAMS
(null)    │   └── BLOCK
(null)    │   └── BLOCK
(null)    │       ├── FUNCTION CALL: printf
(null)    │       │   └── STRING_LITERAL: "Complex: "
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: complex_var [test_all#31]
(null)    │       │   └── FUNCTION CALL: complex
(null)    │       │       ├── INT_LITERAL: 1
(null)    │       │       ├── INT_LITERAL: 3
(null)    │       │       └── INT_LITERAL: 2
(null)    │       ├── FUNCTION CALL: printf
(null)    │       │   ├── STRING_LITERAL: "%d\n"
(null)    │       │   └── IDENTIFIER: complex_var [test_all#31]
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: deeply_nested_var [test_all#31]
(null)    │       │   └── FUNCTION CALL: deeply_nested
(null)    │       │       └── INT_LITERAL: 10
(null)    │       ├── FUNCTION CALL: printf
(null)    │       │   └── STRING_LITERAL: "Deep: "
(null)    │       ├── FUNCTION CALL: printf
(null)    │       │   ├── STRING_LITERAL: "%d\n"
(null)    │       │   └── IDENTIFIER: deeply_nested_var [test_all#31]
(null)    │       ├── FUNCTION CALL: test_strings
(null)    │       ├── FUNCTION CALL: printf
(null)    │       │   └── STRING_LITERAL: "Mega Recursive 5: "
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: mega_recursive_var [test_all#31]
(null)    │       │   └── FUNCTION CALL: mega_recursive
(null)    │       │       └── INT_LITERAL: 5
(null)    │       ├── FUNCTION CALL: printf
(null)    │       │   ├── STRING_LITERAL: "%d\n"
(null)    │       │   └── IDENTIFIER: mega_recursive_var [test_all#31]
(null)    │       ├── FUNCTION CALL: nested_conditions
(null)    │       │   └── INT_LITERAL: 5
(null)    │       ├── FUNCTION CALL: nested_conditions
(null)    │       │   └── UNARYOP : BL_SUBBINOP
(null)    │       │       └── INT_LITERAL: 5
(null)    │       ├── FUNCTION CALL: nested_conditions
(null)    │       │   └── INT_LITERAL: 100
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: loop_fun_var [test_all#31]
(null)    │       │   └── FUNCTION CALL: loop_fun
(null)    │       ├── FUNCTION CALL: printf
(null)    │       │   └── STRING_LITERAL: "Loop Fun: "
(null)    │       ├── FUNCTION CALL: printf
(null)    │       │   ├── STRING_LITERAL: "%d\n"
(null)    │       │   └── IDENTIFIER: loop_fun_var [test_all#31]
(null)    │       ├── FUNCTION CALL: test_scope_shadowing
(null)    │       ├── FUNCTION CALL: printf
(null)    │       │   └── STRING_LITERAL: "Big expr: "
(null)    │       ├── ASSIGN DECL BL_EQUAL
(null)    │       │   ├── IDENTIFIER: test_big_exprs_var [test_all#31]
(null)    │       │   └── FUNCTION CALL: test_big_exprs
(null)    │       ├── FUNCTION CALL: printf
(null)    │       │   ├── STRING_LITERAL: "%d\n"
(null)    │       │   └── IDENTIFIER: test_big_exprs_var [test_all#31]
(null)    │       └── FUNCTION CALL: empty_else
(null)    │           └── INT_LITERAL: 1
(null)    └── MAIN FUNCTION
(null)        └── BLOCK
(null)            ├── FUNCTION CALL: printf
(null)            │   ├── STRING_LITERAL: "%s\n"
(null)            │   └── IDENTIFIER: name [main#32]
(null)            └── FUNCTION CALL: test_all


$ Token :BL_KW_HI_BHAU:
$ Token {
   type          : 311
   location      : line 1, offset 8
   chars         : 'hi bhau'
   string value  : "hi bhau" (len=7)
}

$ Token :BL_KW_BHAU_BAHERUN_GHE:
$ Token {
   type          : 320
   location      : line 3, offset 17
   chars         : 'bhau baherun ghe'
   string value  : "bhau baherun ghe" (len=16)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 3, offset 24
   chars         : 'printf'
   string value  : "printf" (len=6)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 3, offset 25
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_KW_BHAU_LAKSHAT_THEV:
$ Token {
   type          : 309
   location      : line 5, offset 18
   chars         : 'bhau lakshat thev'
   string value  : "bhau lakshat thev" (len=17)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 5, offset 28
   chars         : 'factorial'
   string value  : "factorial" (len=9)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 5, offset 29
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 5, offset 30
   chars         : 'a'
   string value  : "a" (len=1)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 5, offset 31
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 5, offset 32
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :BL_KW_BHAU_JAR:
$ Token {
   type          : 305
   location      : line 6, offset 13
   chars         : 'bhau jar'
   string value  : "bhau jar" (len=8)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 6, offset 14
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 6, offset 15
   chars         : 'a'
   string value  : "a" (len=1)
}

$ Token :BL_LESSEQ:
$ Token {
   type          : 296
   location      : line 6, offset 18
   chars         : '<='
   string value  : "<=" (len=2)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 6, offset 20
   chars         : '1'
   string value  : "1" (len=1)
   int value     : 1
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 6, offset 21
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 6, offset 22
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :KW_BHAU_PARAT_DE:
$ Token {
   type          : 310
   location      : line 7, offset 22
   chars         : 'bhau parat de'
   string value  : "bhau parat de" (len=13)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 7, offset 24
   chars         : '1'
   string value  : "1" (len=1)
   int value     : 1
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 7, offset 25
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 8, offset 6
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :KW_BHAU_PARAT_DE:
$ Token {
   type          : 310
   location      : line 9, offset 18
   chars         : 'bhau parat de'
   string value  : "bhau parat de" (len=13)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 9, offset 20
   chars         : 'a'
   string value  : "a" (len=1)
}

$ Token :BL_MULTBINOP:
$ Token {
   type          : 275
   location      : line 9, offset 22
   chars         : '*'
   string value  : "*" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 9, offset 32
   chars         : 'factorial'
   string value  : "factorial" (len=9)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 9, offset 33
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 9, offset 34
   chars         : 'a'
   string value  : "a" (len=1)
}

$ Token :BL_SUBBINOP:
$ Token {
   type          : 274
   location      : line 9, offset 36
   chars         : '-'
   string value  : "-" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 9, offset 38
   chars         : '1'
   string value  : "1" (len=1)
   int value     : 1
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 9, offset 39
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 9, offset 40
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 10, offset 2
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :BL_KW_BHAU_LAKSHAT_THEV:
$ Token {
   type          : 309
   location      : line 12, offset 18
   chars         : 'bhau lakshat thev'
   string value  : "bhau lakshat thev" (len=17)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 12, offset 28
   chars         : 'fibonacci'
   string value  : "fibonacci" (len=9)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 12, offset 29
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 12, offset 30
   chars         : 'a'
   string value  : "a" (len=1)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 12, offset 31
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 12, offset 32
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :BL_KW_BHAU_JAR:
$ Token {
   type          : 305
   location      : line 13, offset 13
   chars         : 'bhau jar'
   string value  : "bhau jar" (len=8)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 13, offset 14
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 13, offset 15
   chars         : 'a'
   string value  : "a" (len=1)
}

$ Token :BL_LESSEQ:
$ Token {
   type          : 296
   location      : line 13, offset 18
   chars         : '<='
   string value  : "<=" (len=2)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 13, offset 20
   chars         : '1'
   string value  : "1" (len=1)
   int value     : 1
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 13, offset 21
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 13, offset 22
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :KW_BHAU_PARAT_DE:
$ Token {
   type          : 310
   location      : line 14, offset 22
   chars         : 'bhau parat de'
   string value  : "bhau parat de" (len=13)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 14, offset 24
   chars         : 'a'
   string value  : "a" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 14, offset 25
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 15, offset 6
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :KW_BHAU_PARAT_DE:
$ Token {
   type          : 310
   location      : line 16, offset 18
   chars         : 'bhau parat de'
   string value  : "bhau parat de" (len=13)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 16, offset 28
   chars         : 'fibonacci'
   string value  : "fibonacci" (len=9)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 16, offset 29
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 16, offset 30
   chars         : 'a'
   string value  : "a" (len=1)
}

$ Token :BL_SUBBINOP:
$ Token {
   type          : 274
   location      : line 16, offset 32
   chars         : '-'
   string value  : "-" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 16, offset 34
   chars         : '1'
   string value  : "1" (len=1)
   int value     : 1
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 16, offset 35
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_ADDBINOP:
$ Token {
   type          : 273
   location      : line 16, offset 37
   chars         : '+'
   string value  : "+" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 16, offset 47
   chars         : 'fibonacci'
   string value  : "fibonacci" (len=9)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 16, offset 48
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 16, offset 49
   chars         : 'a'
   string value  : "a" (len=1)
}

$ Token :BL_SUBBINOP:
$ Token {
   type          : 274
   location      : line 16, offset 51
   chars         : '-'
   string value  : "-" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 16, offset 53
   chars         : '2'
   string value  : "2" (len=1)
   int value     : 2
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 16, offset 54
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 16, offset 55
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 17, offset 2
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :BL_KW_BHAU_LAKSHAT_THEV:
$ Token {
   type          : 309
   location      : line 19, offset 18
   chars         : 'bhau lakshat thev'
   string value  : "bhau lakshat thev" (len=17)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 19, offset 30
   chars         : 'recurse_sum'
   string value  : "recurse_sum" (len=11)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 19, offset 31
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 19, offset 32
   chars         : 'a'
   string value  : "a" (len=1)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 19, offset 33
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 19, offset 34
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :BL_KW_BHAU_JAR:
$ Token {
   type          : 305
   location      : line 20, offset 13
   chars         : 'bhau jar'
   string value  : "bhau jar" (len=8)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 20, offset 14
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 20, offset 15
   chars         : 'a'
   string value  : "a" (len=1)
}

$ Token :BL_ISEQUALCOND:
$ Token {
   type          : 271
   location      : line 20, offset 18
   chars         : '=='
   string value  : "==" (len=2)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 20, offset 20
   chars         : '0'
   string value  : "0" (len=1)
   int value     : 0
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 20, offset 21
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 20, offset 22
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :KW_BHAU_PARAT_DE:
$ Token {
   type          : 310
   location      : line 21, offset 22
   chars         : 'bhau parat de'
   string value  : "bhau parat de" (len=13)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 21, offset 24
   chars         : '0'
   string value  : "0" (len=1)
   int value     : 0
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 21, offset 25
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 22, offset 6
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :KW_BHAU_PARAT_DE:
$ Token {
   type          : 310
   location      : line 23, offset 18
   chars         : 'bhau parat de'
   string value  : "bhau parat de" (len=13)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 23, offset 20
   chars         : 'a'
   string value  : "a" (len=1)
}

$ Token :BL_ADDBINOP:
$ Token {
   type          : 273
   location      : line 23, offset 22
   chars         : '+'
   string value  : "+" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 23, offset 34
   chars         : 'recurse_sum'
   string value  : "recurse_sum" (len=11)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 23, offset 35
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 23, offset 36
   chars         : 'a'
   string value  : "a" (len=1)
}

$ Token :BL_SUBBINOP:
$ Token {
   type          : 274
   location      : line 23, offset 38
   chars         : '-'
   string value  : "-" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 23, offset 40
   chars         : '1'
   string value  : "1" (len=1)
   int value     : 1
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 23, offset 41
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 23, offset 42
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 24, offset 2
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :BL_KW_BHAU_LAKSHAT_THEV:
$ Token {
   type          : 309
   location      : line 26, offset 18
   chars         : 'bhau lakshat thev'
   string value  : "bhau lakshat thev" (len=17)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 26, offset 29
   chars         : 'inv_digits'
   string value  : "inv_digits" (len=10)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 26, offset 30
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 26, offset 31
   chars         : 'a'
   string value  : "a" (len=1)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 26, offset 32
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 26, offset 33
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :BL_KW_BHAU_JAR:
$ Token {
   type          : 305
   location      : line 27, offset 13
   chars         : 'bhau jar'
   string value  : "bhau jar" (len=8)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 27, offset 14
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 27, offset 15
   chars         : 'a'
   string value  : "a" (len=1)
}

$ Token :BL_ISEQUALCOND:
$ Token {
   type          : 271
   location      : line 27, offset 18
   chars         : '=='
   string value  : "==" (len=2)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 27, offset 20
   chars         : '0'
   string value  : "0" (len=1)
   int value     : 0
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 27, offset 21
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 27, offset 22
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :KW_BHAU_PARAT_DE:
$ Token {
   type          : 310
   location      : line 28, offset 22
   chars         : 'bhau parat de'
   string value  : "bhau parat de" (len=13)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 28, offset 24
   chars         : '0'
   string value  : "0" (len=1)
   int value     : 0
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 28, offset 25
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 29, offset 6
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 30, offset 11
   chars         : 'printf'
   string value  : "printf" (len=6)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 30, offset 12
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_STRING:
$ Token {
   type          : 259
   location      : line 30, offset 17
   chars         : '"%d "'
   string value  : "%d " (len=3)
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 30, offset 18
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 30, offset 19
   chars         : 'a'
   string value  : "a" (len=1)
}

$ Token :BL_MODBINOP:
$ Token {
   type          : 272
   location      : line 30, offset 21
   chars         : '%'
   string value  : "%" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 30, offset 24
   chars         : '10'
   string value  : "10" (len=2)
   int value     : 10
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 30, offset 25
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 30, offset 26
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :KW_BHAU_PARAT_DE:
$ Token {
   type          : 310
   location      : line 31, offset 18
   chars         : 'bhau parat de'
   string value  : "bhau parat de" (len=13)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 31, offset 29
   chars         : 'inv_digits'
   string value  : "inv_digits" (len=10)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 31, offset 30
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 31, offset 31
   chars         : 'a'
   string value  : "a" (len=1)
}

$ Token :BL_DIVBINOP:
$ Token {
   type          : 276
   location      : line 31, offset 32
   chars         : '/'
   string value  : "/" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 31, offset 34
   chars         : '10'
   string value  : "10" (len=2)
   int value     : 10
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 31, offset 35
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 31, offset 36
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 32, offset 2
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :BL_KW_BHAU_LAKSHAT_THEV:
$ Token {
   type          : 309
   location      : line 34, offset 18
   chars         : 'bhau lakshat thev'
   string value  : "bhau lakshat thev" (len=17)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 34, offset 24
   chars         : 'power'
   string value  : "power" (len=5)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 34, offset 25
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 34, offset 29
   chars         : 'base'
   string value  : "base" (len=4)
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 34, offset 30
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 34, offset 33
   chars         : 'exp'
   string value  : "exp" (len=3)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 34, offset 34
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 34, offset 35
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :BL_KW_BHAU_JAR:
$ Token {
   type          : 305
   location      : line 35, offset 13
   chars         : 'bhau jar'
   string value  : "bhau jar" (len=8)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 35, offset 14
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 35, offset 17
   chars         : 'exp'
   string value  : "exp" (len=3)
}

$ Token :BL_ISEQUALCOND:
$ Token {
   type          : 271
   location      : line 35, offset 20
   chars         : '=='
   string value  : "==" (len=2)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 35, offset 22
   chars         : '0'
   string value  : "0" (len=1)
   int value     : 0
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 35, offset 23
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 35, offset 24
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :KW_BHAU_PARAT_DE:
$ Token {
   type          : 310
   location      : line 36, offset 22
   chars         : 'bhau parat de'
   string value  : "bhau parat de" (len=13)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 36, offset 24
   chars         : '1'
   string value  : "1" (len=1)
   int value     : 1
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 36, offset 25
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 37, offset 6
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :KW_BHAU_PARAT_DE:
$ Token {
   type          : 310
   location      : line 38, offset 18
   chars         : 'bhau parat de'
   string value  : "bhau parat de" (len=13)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 38, offset 23
   chars         : 'base'
   string value  : "base" (len=4)
}

$ Token :BL_MULTBINOP:
$ Token {
   type          : 275
   location      : line 38, offset 25
   chars         : '*'
   string value  : "*" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 38, offset 31
   chars         : 'power'
   string value  : "power" (len=5)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 38, offset 32
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 38, offset 36
   chars         : 'base'
   string value  : "base" (len=4)
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 38, offset 37
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 38, offset 40
   chars         : 'exp'
   string value  : "exp" (len=3)
}

$ Token :BL_SUBBINOP:
$ Token {
   type          : 274
   location      : line 38, offset 41
   chars         : '-'
   string value  : "-" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 38, offset 42
   chars         : '1'
   string value  : "1" (len=1)
   int value     : 1
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 38, offset 43
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 38, offset 44
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 39, offset 2
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :BL_KW_BHAU_LAKSHAT_THEV:
$ Token {
   type          : 309
   location      : line 41, offset 18
   chars         : 'bhau lakshat thev'
   string value  : "bhau lakshat thev" (len=17)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 41, offset 26
   chars         : 'reverse'
   string value  : "reverse" (len=7)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 41, offset 27
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 41, offset 28
   chars         : 'n'
   string value  : "n" (len=1)
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 41, offset 29
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 41, offset 32
   chars         : 'rev'
   string value  : "rev" (len=3)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 41, offset 33
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 41, offset 34
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :BL_KW_BHAU_JAR:
$ Token {
   type          : 305
   location      : line 42, offset 13
   chars         : 'bhau jar'
   string value  : "bhau jar" (len=8)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 42, offset 14
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 42, offset 15
   chars         : 'n'
   string value  : "n" (len=1)
}

$ Token :BL_ISEQUALCOND:
$ Token {
   type          : 271
   location      : line 42, offset 18
   chars         : '=='
   string value  : "==" (len=2)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 42, offset 20
   chars         : '0'
   string value  : "0" (len=1)
   int value     : 0
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 42, offset 21
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 42, offset 22
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :KW_BHAU_PARAT_DE:
$ Token {
   type          : 310
   location      : line 43, offset 22
   chars         : 'bhau parat de'
   string value  : "bhau parat de" (len=13)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 43, offset 26
   chars         : 'rev'
   string value  : "rev" (len=3)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 43, offset 27
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 44, offset 6
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :KW_BHAU_PARAT_DE:
$ Token {
   type          : 310
   location      : line 45, offset 18
   chars         : 'bhau parat de'
   string value  : "bhau parat de" (len=13)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 45, offset 26
   chars         : 'reverse'
   string value  : "reverse" (len=7)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 45, offset 27
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 45, offset 28
   chars         : 'n'
   string value  : "n" (len=1)
}

$ Token :BL_DIVBINOP:
$ Token {
   type          : 276
   location      : line 45, offset 29
   chars         : '/'
   string value  : "/" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 45, offset 31
   chars         : '10'
   string value  : "10" (len=2)
   int value     : 10
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 45, offset 32
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 45, offset 35
   chars         : 'rev'
   string value  : "rev" (len=3)
}

$ Token :BL_MULTBINOP:
$ Token {
   type          : 275
   location      : line 45, offset 36
   chars         : '*'
   string value  : "*" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 45, offset 38
   chars         : '10'
   string value  : "10" (len=2)
   int value     : 10
}

$ Token :BL_ADDBINOP:
$ Token {
   type          : 273
   location      : line 45, offset 39
   chars         : '+'
   string value  : "+" (len=1)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 45, offset 40
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 45, offset 41
   chars         : 'n'
   string value  : "n" (len=1)
}

$ Token :BL_MODBINOP:
$ Token {
   type          : 272
   location      : line 45, offset 42
   chars         : '%'
   string value  : "%" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 45, offset 44
   chars         : '10'
   string value  : "10" (len=2)
   int value     : 10
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 45, offset 45
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 45, offset 46
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 45, offset 47
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 46, offset 2
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :BL_KW_BHAU_LAKSHAT_THEV:
$ Token {
   type          : 309
   location      : line 48, offset 18
   chars         : 'bhau lakshat thev'
   string value  : "bhau lakshat thev" (len=17)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 48, offset 32
   chars         : 'is_palindrome'
   string value  : "is_palindrome" (len=13)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 48, offset 33
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 48, offset 34
   chars         : 'n'
   string value  : "n" (len=1)
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 48, offset 35
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 48, offset 38
   chars         : 'rev'
   string value  : "rev" (len=3)
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 48, offset 39
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 48, offset 43
   chars         : 'orig'
   string value  : "orig" (len=4)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 48, offset 44
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 48, offset 45
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :BL_KW_BHAU_JAR:
$ Token {
   type          : 305
   location      : line 49, offset 13
   chars         : 'bhau jar'
   string value  : "bhau jar" (len=8)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 49, offset 14
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 49, offset 15
   chars         : 'n'
   string value  : "n" (len=1)
}

$ Token :BL_ISEQUALCOND:
$ Token {
   type          : 271
   location      : line 49, offset 18
   chars         : '=='
   string value  : "==" (len=2)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 49, offset 20
   chars         : '0'
   string value  : "0" (len=1)
   int value     : 0
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 49, offset 21
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 49, offset 22
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :KW_BHAU_PARAT_DE:
$ Token {
   type          : 310
   location      : line 50, offset 22
   chars         : 'bhau parat de'
   string value  : "bhau parat de" (len=13)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 50, offset 26
   chars         : 'rev'
   string value  : "rev" (len=3)
}

$ Token :BL_ISEQUALCOND:
$ Token {
   type          : 271
   location      : line 50, offset 29
   chars         : '=='
   string value  : "==" (len=2)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 50, offset 34
   chars         : 'orig'
   string value  : "orig" (len=4)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 50, offset 35
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 51, offset 6
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :KW_BHAU_PARAT_DE:
$ Token {
   type          : 310
   location      : line 52, offset 18
   chars         : 'bhau parat de'
   string value  : "bhau parat de" (len=13)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 52, offset 32
   chars         : 'is_palindrome'
   string value  : "is_palindrome" (len=13)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 52, offset 33
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 52, offset 34
   chars         : 'n'
   string value  : "n" (len=1)
}

$ Token :BL_DIVBINOP:
$ Token {
   type          : 276
   location      : line 52, offset 35
   chars         : '/'
   string value  : "/" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 52, offset 37
   chars         : '10'
   string value  : "10" (len=2)
   int value     : 10
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 52, offset 38
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 52, offset 41
   chars         : 'rev'
   string value  : "rev" (len=3)
}

$ Token :BL_MULTBINOP:
$ Token {
   type          : 275
   location      : line 52, offset 42
   chars         : '*'
   string value  : "*" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 52, offset 44
   chars         : '10'
   string value  : "10" (len=2)
   int value     : 10
}

$ Token :BL_ADDBINOP:
$ Token {
   type          : 273
   location      : line 52, offset 45
   chars         : '+'
   string value  : "+" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 52, offset 46
   chars         : 'n'
   string value  : "n" (len=1)
}

$ Token :BL_MODBINOP:
$ Token {
   type          : 272
   location      : line 52, offset 47
   chars         : '%'
   string value  : "%" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 52, offset 49
   chars         : '10'
   string value  : "10" (len=2)
   int value     : 10
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 52, offset 50
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 52, offset 54
   chars         : 'orig'
   string value  : "orig" (len=4)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 52, offset 55
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 52, offset 56
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 53, offset 2
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :BL_KW_BHAU_LAKSHAT_THEV:
$ Token {
   type          : 309
   location      : line 55, offset 18
   chars         : 'bhau lakshat thev'
   string value  : "bhau lakshat thev" (len=17)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 55, offset 22
   chars         : 'gcd'
   string value  : "gcd" (len=3)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 55, offset 23
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 55, offset 24
   chars         : 'a'
   string value  : "a" (len=1)
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 55, offset 25
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 55, offset 26
   chars         : 'b'
   string value  : "b" (len=1)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 55, offset 27
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 55, offset 28
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :BL_KW_BHAU_JAR:
$ Token {
   type          : 305
   location      : line 56, offset 13
   chars         : 'bhau jar'
   string value  : "bhau jar" (len=8)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 56, offset 14
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 56, offset 15
   chars         : 'b'
   string value  : "b" (len=1)
}

$ Token :BL_ISEQUALCOND:
$ Token {
   type          : 271
   location      : line 56, offset 18
   chars         : '=='
   string value  : "==" (len=2)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 56, offset 20
   chars         : '0'
   string value  : "0" (len=1)
   int value     : 0
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 56, offset 21
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 56, offset 22
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :KW_BHAU_PARAT_DE:
$ Token {
   type          : 310
   location      : line 57, offset 22
   chars         : 'bhau parat de'
   string value  : "bhau parat de" (len=13)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 57, offset 24
   chars         : 'a'
   string value  : "a" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 57, offset 25
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 58, offset 6
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :KW_BHAU_PARAT_DE:
$ Token {
   type          : 310
   location      : line 59, offset 18
   chars         : 'bhau parat de'
   string value  : "bhau parat de" (len=13)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 59, offset 22
   chars         : 'gcd'
   string value  : "gcd" (len=3)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 59, offset 23
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 59, offset 24
   chars         : 'b'
   string value  : "b" (len=1)
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 59, offset 25
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 59, offset 26
   chars         : 'a'
   string value  : "a" (len=1)
}

$ Token :BL_MODBINOP:
$ Token {
   type          : 272
   location      : line 59, offset 27
   chars         : '%'
   string value  : "%" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 59, offset 28
   chars         : 'b'
   string value  : "b" (len=1)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 59, offset 29
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 59, offset 30
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 60, offset 2
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :BL_KW_BHAU_LAKSHAT_THEV:
$ Token {
   type          : 309
   location      : line 62, offset 18
   chars         : 'bhau lakshat thev'
   string value  : "bhau lakshat thev" (len=17)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 62, offset 30
   chars         : 'print_stars'
   string value  : "print_stars" (len=11)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 62, offset 31
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 62, offset 32
   chars         : 'n'
   string value  : "n" (len=1)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 62, offset 33
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 62, offset 34
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :BL_KW_BHAU_JAR:
$ Token {
   type          : 305
   location      : line 63, offset 13
   chars         : 'bhau jar'
   string value  : "bhau jar" (len=8)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 63, offset 14
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 63, offset 15
   chars         : 'n'
   string value  : "n" (len=1)
}

$ Token :BL_ISEQUALCOND:
$ Token {
   type          : 271
   location      : line 63, offset 18
   chars         : '=='
   string value  : "==" (len=2)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 63, offset 20
   chars         : '0'
   string value  : "0" (len=1)
   int value     : 0
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 63, offset 21
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 63, offset 22
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 64, offset 15
   chars         : 'printf'
   string value  : "printf" (len=6)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 64, offset 16
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_STRING:
$ Token {
   type          : 259
   location      : line 64, offset 20
   chars         : '"\n"'
   string value  : "\n" (len=2)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 64, offset 21
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 64, offset 22
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :KW_BHAU_PARAT_DE:
$ Token {
   type          : 310
   location      : line 65, offset 22
   chars         : 'bhau parat de'
   string value  : "bhau parat de" (len=13)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 65, offset 24
   chars         : '0'
   string value  : "0" (len=1)
   int value     : 0
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 65, offset 25
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 66, offset 6
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :BL_KW_BHAU_HAI_AHE:
$ Token {
   type          : 304
   location      : line 67, offset 17
   chars         : 'bhau hai ahe'
   string value  : "bhau hai ahe" (len=12)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 67, offset 19
   chars         : 'i'
   string value  : "i" (len=1)
}

$ Token :BL_EQUAL:
$ Token {
   type          : 270
   location      : line 67, offset 21
   chars         : '='
   string value  : "=" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 67, offset 23
   chars         : '0'
   string value  : "0" (len=1)
   int value     : 0
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 67, offset 24
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :case BL_KW_BHAU_JOPARENT:
$ Token {
   type          : 308
   location      : line 68, offset 18
   chars         : 'bhau joparent'
   string value  : "bhau joparent" (len=13)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 68, offset 19
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 68, offset 20
   chars         : 'i'
   string value  : "i" (len=1)
}

$ Token :BL_LESSTHAN:
$ Token {
   type          : 293
   location      : line 68, offset 22
   chars         : '<'
   string value  : "<" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 68, offset 24
   chars         : 'n'
   string value  : "n" (len=1)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 68, offset 25
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 68, offset 26
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 69, offset 15
   chars         : 'printf'
   string value  : "printf" (len=6)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 69, offset 16
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_STRING:
$ Token {
   type          : 259
   location      : line 69, offset 20
   chars         : '"* "'
   string value  : "* " (len=2)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 69, offset 21
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 69, offset 22
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_INC:
$ Token {
   type          : 282
   location      : line 70, offset 11
   chars         : '++'
   string value  : "++" (len=2)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 70, offset 12
   chars         : 'i'
   string value  : "i" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 70, offset 13
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 71, offset 6
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 72, offset 11
   chars         : 'printf'
   string value  : "printf" (len=6)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 72, offset 12
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_STRING:
$ Token {
   type          : 259
   location      : line 72, offset 16
   chars         : '"\n"'
   string value  : "\n" (len=2)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 72, offset 17
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 72, offset 18
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :KW_BHAU_PARAT_DE:
$ Token {
   type          : 310
   location      : line 73, offset 18
   chars         : 'bhau parat de'
   string value  : "bhau parat de" (len=13)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 73, offset 30
   chars         : 'print_stars'
   string value  : "print_stars" (len=11)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 73, offset 31
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 73, offset 32
   chars         : 'n'
   string value  : "n" (len=1)
}

$ Token :BL_SUBBINOP:
$ Token {
   type          : 274
   location      : line 73, offset 34
   chars         : '-'
   string value  : "-" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 73, offset 36
   chars         : '1'
   string value  : "1" (len=1)
   int value     : 1
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 73, offset 37
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 73, offset 38
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 74, offset 2
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :BL_KW_BHAU_LAKSHAT_THEV:
$ Token {
   type          : 309
   location      : line 76, offset 18
   chars         : 'bhau lakshat thev'
   string value  : "bhau lakshat thev" (len=17)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 76, offset 28
   chars         : 'digit_sum'
   string value  : "digit_sum" (len=9)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 76, offset 29
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 76, offset 30
   chars         : 'n'
   string value  : "n" (len=1)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 76, offset 31
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 76, offset 32
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :BL_KW_BHAU_JAR:
$ Token {
   type          : 305
   location      : line 77, offset 13
   chars         : 'bhau jar'
   string value  : "bhau jar" (len=8)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 77, offset 14
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 77, offset 15
   chars         : 'n'
   string value  : "n" (len=1)
}

$ Token :BL_ISEQUALCOND:
$ Token {
   type          : 271
   location      : line 77, offset 18
   chars         : '=='
   string value  : "==" (len=2)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 77, offset 20
   chars         : '0'
   string value  : "0" (len=1)
   int value     : 0
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 77, offset 21
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 77, offset 22
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :KW_BHAU_PARAT_DE:
$ Token {
   type          : 310
   location      : line 78, offset 22
   chars         : 'bhau parat de'
   string value  : "bhau parat de" (len=13)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 78, offset 24
   chars         : '0'
   string value  : "0" (len=1)
   int value     : 0
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 78, offset 25
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 79, offset 6
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :KW_BHAU_PARAT_DE:
$ Token {
   type          : 310
   location      : line 80, offset 18
   chars         : 'bhau parat de'
   string value  : "bhau parat de" (len=13)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 80, offset 20
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 80, offset 21
   chars         : 'n'
   string value  : "n" (len=1)
}

$ Token :BL_MODBINOP:
$ Token {
   type          : 272
   location      : line 80, offset 22
   chars         : '%'
   string value  : "%" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 80, offset 24
   chars         : '10'
   string value  : "10" (len=2)
   int value     : 10
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 80, offset 25
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_ADDBINOP:
$ Token {
   type          : 273
   location      : line 80, offset 27
   chars         : '+'
   string value  : "+" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 80, offset 37
   chars         : 'digit_sum'
   string value  : "digit_sum" (len=9)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 80, offset 38
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 80, offset 39
   chars         : 'n'
   string value  : "n" (len=1)
}

$ Token :BL_DIVBINOP:
$ Token {
   type          : 276
   location      : line 80, offset 40
   chars         : '/'
   string value  : "/" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 80, offset 42
   chars         : '10'
   string value  : "10" (len=2)
   int value     : 10
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 80, offset 43
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 80, offset 44
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 81, offset 2
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :BL_KW_BHAU_LAKSHAT_THEV:
$ Token {
   type          : 309
   location      : line 83, offset 18
   chars         : 'bhau lakshat thev'
   string value  : "bhau lakshat thev" (len=17)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 83, offset 40
   chars         : 'print_recursion_tests'
   string value  : "print_recursion_tests" (len=21)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 83, offset 41
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 83, offset 42
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 83, offset 43
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :BL_KW_BHAU_HAI_AHE:
$ Token {
   type          : 304
   location      : line 84, offset 17
   chars         : 'bhau hai ahe'
   string value  : "bhau hai ahe" (len=12)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 84, offset 25
   chars         : 'fac_var'
   string value  : "fac_var" (len=7)
}

$ Token :BL_EQUAL:
$ Token {
   type          : 270
   location      : line 84, offset 27
   chars         : '='
   string value  : "=" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 84, offset 37
   chars         : 'factorial'
   string value  : "factorial" (len=9)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 84, offset 38
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 84, offset 39
   chars         : '5'
   string value  : "5" (len=1)
   int value     : 5
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 84, offset 40
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 84, offset 41
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 85, offset 11
   chars         : 'printf'
   string value  : "printf" (len=6)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 85, offset 12
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_STRING:
$ Token {
   type          : 259
   location      : line 85, offset 30
   chars         : '"Factorial : %d\n"'
   string value  : "Factorial : %d\n" (len=16)
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 85, offset 31
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 85, offset 38
   chars         : 'fac_var'
   string value  : "fac_var" (len=7)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 85, offset 39
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 85, offset 40
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_KW_BHAU_HAI_AHE:
$ Token {
   type          : 304
   location      : line 86, offset 17
   chars         : 'bhau hai ahe'
   string value  : "bhau hai ahe" (len=12)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 86, offset 25
   chars         : 'fib_var'
   string value  : "fib_var" (len=7)
}

$ Token :BL_EQUAL:
$ Token {
   type          : 270
   location      : line 86, offset 27
   chars         : '='
   string value  : "=" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 86, offset 37
   chars         : 'fibonacci'
   string value  : "fibonacci" (len=9)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 86, offset 38
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 86, offset 39
   chars         : '5'
   string value  : "5" (len=1)
   int value     : 5
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 86, offset 40
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 86, offset 41
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 87, offset 11
   chars         : 'printf'
   string value  : "printf" (len=6)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 87, offset 12
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_STRING:
$ Token {
   type          : 259
   location      : line 87, offset 30
   chars         : '"Fibonacci : %d\n"'
   string value  : "Fibonacci : %d\n" (len=16)
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 87, offset 31
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 87, offset 38
   chars         : 'fib_var'
   string value  : "fib_var" (len=7)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 87, offset 39
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 87, offset 40
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_KW_BHAU_HAI_AHE:
$ Token {
   type          : 304
   location      : line 88, offset 17
   chars         : 'bhau hai ahe'
   string value  : "bhau hai ahe" (len=12)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 88, offset 26
   chars         : 'rsum_var'
   string value  : "rsum_var" (len=8)
}

$ Token :BL_EQUAL:
$ Token {
   type          : 270
   location      : line 88, offset 28
   chars         : '='
   string value  : "=" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 88, offset 40
   chars         : 'recurse_sum'
   string value  : "recurse_sum" (len=11)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 88, offset 41
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 88, offset 42
   chars         : '5'
   string value  : "5" (len=1)
   int value     : 5
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 88, offset 43
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 88, offset 44
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 89, offset 11
   chars         : 'printf'
   string value  : "printf" (len=6)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 89, offset 12
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_STRING:
$ Token {
   type          : 259
   location      : line 89, offset 32
   chars         : '"Recurse sum : %d\n"'
   string value  : "Recurse sum : %d\n" (len=18)
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 89, offset 33
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 89, offset 42
   chars         : 'rsum_var'
   string value  : "rsum_var" (len=8)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 89, offset 43
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 89, offset 44
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 90, offset 15
   chars         : 'inv_digits'
   string value  : "inv_digits" (len=10)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 90, offset 16
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 90, offset 20
   chars         : '5324'
   string value  : "5324" (len=4)
   int value     : 5324
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 90, offset 21
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 90, offset 22
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 91, offset 11
   chars         : 'printf'
   string value  : "printf" (len=6)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 91, offset 12
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_STRING:
$ Token {
   type          : 259
   location      : line 91, offset 16
   chars         : '"\n"'
   string value  : "\n" (len=2)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 91, offset 17
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 91, offset 18
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_KW_BHAU_HAI_AHE:
$ Token {
   type          : 304
   location      : line 92, offset 17
   chars         : 'bhau hai ahe'
   string value  : "bhau hai ahe" (len=12)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 92, offset 25
   chars         : 'pow_var'
   string value  : "pow_var" (len=7)
}

$ Token :BL_EQUAL:
$ Token {
   type          : 270
   location      : line 92, offset 27
   chars         : '='
   string value  : "=" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 92, offset 33
   chars         : 'power'
   string value  : "power" (len=5)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 92, offset 34
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 92, offset 35
   chars         : '5'
   string value  : "5" (len=1)
   int value     : 5
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 92, offset 36
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 92, offset 37
   chars         : '2'
   string value  : "2" (len=1)
   int value     : 2
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 92, offset 38
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 92, offset 39
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 93, offset 11
   chars         : 'printf'
   string value  : "printf" (len=6)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 93, offset 12
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_STRING:
$ Token {
   type          : 259
   location      : line 93, offset 26
   chars         : '"Power : %d\n"'
   string value  : "Power : %d\n" (len=12)
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 93, offset 27
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 93, offset 34
   chars         : 'pow_var'
   string value  : "pow_var" (len=7)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 93, offset 35
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 93, offset 36
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_KW_BHAU_HAI_AHE:
$ Token {
   type          : 304
   location      : line 94, offset 17
   chars         : 'bhau hai ahe'
   string value  : "bhau hai ahe" (len=12)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 94, offset 29
   chars         : 'reverse_var'
   string value  : "reverse_var" (len=11)
}

$ Token :BL_EQUAL:
$ Token {
   type          : 270
   location      : line 94, offset 31
   chars         : '='
   string value  : "=" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 94, offset 39
   chars         : 'reverse'
   string value  : "reverse" (len=7)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 94, offset 40
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 94, offset 44
   chars         : '1234'
   string value  : "1234" (len=4)
   int value     : 1234
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 94, offset 45
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 94, offset 46
   chars         : '0'
   string value  : "0" (len=1)
   int value     : 0
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 94, offset 47
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 94, offset 48
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 95, offset 11
   chars         : 'printf'
   string value  : "printf" (len=6)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 95, offset 12
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_STRING:
$ Token {
   type          : 259
   location      : line 95, offset 28
   chars         : '"Reverse : %d\n"'
   string value  : "Reverse : %d\n" (len=14)
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 95, offset 29
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 95, offset 40
   chars         : 'reverse_var'
   string value  : "reverse_var" (len=11)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 95, offset 41
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 95, offset 42
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_KW_BHAU_HAI_AHE:
$ Token {
   type          : 304
   location      : line 96, offset 17
   chars         : 'bhau hai ahe'
   string value  : "bhau hai ahe" (len=12)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 96, offset 26
   chars         : 'is_palin'
   string value  : "is_palin" (len=8)
}

$ Token :BL_EQUAL:
$ Token {
   type          : 270
   location      : line 96, offset 28
   chars         : '='
   string value  : "=" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 96, offset 42
   chars         : 'is_palindrome'
   string value  : "is_palindrome" (len=13)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 96, offset 43
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 96, offset 47
   chars         : '1221'
   string value  : "1221" (len=4)
   int value     : 1221
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 96, offset 48
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 96, offset 49
   chars         : '0'
   string value  : "0" (len=1)
   int value     : 0
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 96, offset 50
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 96, offset 54
   chars         : '1221'
   string value  : "1221" (len=4)
   int value     : 1221
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 96, offset 55
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 96, offset 56
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 97, offset 11
   chars         : 'printf'
   string value  : "printf" (len=6)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 97, offset 12
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_STRING:
$ Token {
   type          : 259
   location      : line 97, offset 34
   chars         : '"Is palindrome : %d\n"'
   string value  : "Is palindrome : %d\n" (len=20)
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 97, offset 35
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 97, offset 43
   chars         : 'is_palin'
   string value  : "is_palin" (len=8)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 97, offset 44
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 97, offset 45
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_KW_BHAU_HAI_AHE:
$ Token {
   type          : 304
   location      : line 98, offset 17
   chars         : 'bhau hai ahe'
   string value  : "bhau hai ahe" (len=12)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 98, offset 25
   chars         : 'gcd_var'
   string value  : "gcd_var" (len=7)
}

$ Token :BL_EQUAL:
$ Token {
   type          : 270
   location      : line 98, offset 27
   chars         : '='
   string value  : "=" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 98, offset 31
   chars         : 'gcd'
   string value  : "gcd" (len=3)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 98, offset 32
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 98, offset 34
   chars         : '39'
   string value  : "39" (len=2)
   int value     : 39
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 98, offset 35
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 98, offset 37
   chars         : '26'
   string value  : "26" (len=2)
   int value     : 26
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 98, offset 38
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 98, offset 39
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 99, offset 11
   chars         : 'printf'
   string value  : "printf" (len=6)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 99, offset 12
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_STRING:
$ Token {
   type          : 259
   location      : line 99, offset 35
   chars         : '"GCD of 26 & 39 : %d\n"'
   string value  : "GCD of 26 & 39 : %d\n" (len=21)
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 99, offset 36
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 99, offset 43
   chars         : 'gcd_var'
   string value  : "gcd_var" (len=7)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 99, offset 44
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 99, offset 45
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 100, offset 16
   chars         : 'print_stars'
   string value  : "print_stars" (len=11)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 100, offset 17
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 100, offset 19
   chars         : '10'
   string value  : "10" (len=2)
   int value     : 10
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 100, offset 20
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 100, offset 21
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_KW_BHAU_HAI_AHE:
$ Token {
   type          : 304
   location      : line 101, offset 17
   chars         : 'bhau hai ahe'
   string value  : "bhau hai ahe" (len=12)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 101, offset 26
   chars         : 'dsum_var'
   string value  : "dsum_var" (len=8)
}

$ Token :BL_EQUAL:
$ Token {
   type          : 270
   location      : line 101, offset 28
   chars         : '='
   string value  : "=" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 101, offset 38
   chars         : 'digit_sum'
   string value  : "digit_sum" (len=9)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 101, offset 39
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 101, offset 43
   chars         : '1234'
   string value  : "1234" (len=4)
   int value     : 1234
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 101, offset 44
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 101, offset 45
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 102, offset 11
   chars         : 'printf'
   string value  : "printf" (len=6)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 102, offset 12
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_STRING:
$ Token {
   type          : 259
   location      : line 102, offset 34
   chars         : '"Sum of digits : %d\n"'
   string value  : "Sum of digits : %d\n" (len=20)
}

$ Token :BL_COMMA:
$ Token {
   type          : 269
   location      : line 102, offset 35
   chars         : ','
   string value  : "," (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 102, offset 43
   chars         : 'dsum_var'
   string value  : "dsum_var" (len=8)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 102, offset 44
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 102, offset 45
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 103, offset 2
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :BL_KW_BHAU_MAIN:
$ Token {
   type          : 321
   location      : line 105, offset 17
   chars         : 'bhau ithun chalu'
   string value  : "bhau ithun chalu" (len=16)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 265
   location      : line 105, offset 19
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 106, offset 26
   chars         : 'print_recursion_tests'
   string value  : "print_recursion_tests" (len=21)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 263
   location      : line 106, offset 27
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 264
   location      : line 106, offset 28
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 106, offset 29
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 266
   location      : line 107, offset 2
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :BL_KW_BYE_BHAU:
$ Token {
   type          : 312
   location      : line 110, offset 9
   chars         : 'bye bhau'
   string value  : "bye bhau" (len=8)
}

$ Token :BL_EOF:
$ Token {
   type          : 303
   location      : line 110, offset 10
   chars         : ''
   string value  : "" (len=1)
}


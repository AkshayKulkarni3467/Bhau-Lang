[Extern] extern putchar (extern) (0)
[Extern] extern printf (extern) (0)
[Declaration] rule (int) (0) = 137 (int) (0)
[Declaration] width (int) (0) = 65 (int) (0)
[Declaration] steps (int) (0) = 32 (int) (0)
[Function start] function print_state begin:
[Parameter] param state (idt) (1)
[Declaration] t0 (int) (1) = 0 (int) (1)
[Declaration] t1 (int) (1) = 0 (int) (1)
[Assignment] t1 (int) (1) = width (int) (1)
[Declaration] t2 (int) (1) = 0 (int) (1)
[Assignment] t2 (int) (1) = 1 (int) (1)
[Binary Op] t0 (int) (1) = t1 (int) (1) - t2 (int) (1) 
[Declaration] i (int) (1) = t0 (int) (1)

[Label] L0:
[Declaration] t3 (bool) (1) = 0 (int) (1)
[Declaration] t4 (int) (1) = 0 (int) (1)
[Assignment] t4 (int) (1) = i (int) (1)
[Declaration] t5 (int) (1) = 0 (int) (1)
[Assignment] t5 (int) (1) = 0 (int) (1)
[Binary Op] t3 (bool) (1) = t4 (int) (1) >= t5 (int) (1) 
[Conditional Jump] if t3 (bool) (1) != 0 (int) (1) goto L1
[Jump] goto L2

[Label] L1:
[Declaration] t6 (int) (2) = 0 (int) (2)
[Declaration] t7 (idt) (2) = 0 (int) (2)
[Assignment] t7 (idt) (2) = state (idt) (2)
[Declaration] t8 (int) (2) = 0 (int) (2)
[Assignment] t8 (int) (2) = i (int) (2)
[Binary Op] t6 (int) (2) = t7 (idt) (2) >> t8 (int) (2) 
[Declaration] t9 (int) (2) = 0 (int) (2)
[Declaration] t10 (int) (2) = 0 (int) (2)
[Assignment] t10 (int) (2) = t6 (int) (2)
[Declaration] t11 (int) (2) = 0 (int) (2)
[Assignment] t11 (int) (2) = 1 (int) (2)
[Binary Op] t9 (int) (2) = t10 (int) (2) & t11 (int) (2) 
[Conditional Jump] if t9 (int) (2) != 0 (int) (2) goto L3
[Declaration] t12 (char) (3) =   (char) (3)
[Argument] arg t12 (char) (3)
[Declaration] t13 (int) (3) = 0 (int) (3)
[Function call] t13 (int) (3) = call putchar (extern) (3), 1
[Jump] goto L4

[Label] L3:
[Declaration] t14 (char) (4) = * (char) (4)
[Argument] arg t14 (char) (4)
[Declaration] t15 (int) (4) = 0 (int) (4)
[Function call] t15 (int) (4) = call putchar (extern) (4), 1

[Label] L4:
[Declaration] t16 (int) (2) = 0 (int) (2)
[Unary op] t16 (int) (2) = --i (int) (2) 
[Assignment] i (int) (2) = t16 (int) (2)
[Jump] goto L0

[Label] L2:
[Declaration] t17 (str) (1) = \n (str) (1)
[Argument] arg t17 (str) (1)
[Declaration] t18 (int) (1) = 0 (int) (1)
[Function call] t18 (int) (1) = call printf (extern) (1), 1
[Function end] function end
[Function start] function update_state begin:
[Parameter] param rule (int) (5)
[Parameter] param current (idt) (5)
[Parameter] param next (idt) (5)
[Parameter] param i (idt) (5)
[Declaration] left (idt) (5) unassigned
[Declaration] t19 (int) (5) = 0 (int) (5)
[Declaration] t20 (int) (5) = 0 (int) (5)
[Assignment] t20 (int) (5) = width (int) (5)
[Declaration] t21 (int) (5) = 0 (int) (5)
[Assignment] t21 (int) (5) = 1 (int) (5)
[Binary Op] t19 (int) (5) = t20 (int) (5) - t21 (int) (5) 
[Declaration] t22 (bool) (5) = 0 (int) (5)
[Declaration] t23 (idt) (5) = 0 (int) (5)
[Assignment] t23 (idt) (5) = i (idt) (5)
[Declaration] t24 (int) (5) = 0 (int) (5)
[Assignment] t24 (int) (5) = t19 (int) (5)
[Binary Op] t22 (bool) (5) = t23 (idt) (5) == t24 (int) (5) 
[Conditional Jump] if t22 (bool) (5) != 0 (int) (5) goto L5
[Declaration] t25 (int) (6) = 0 (int) (6)
[Declaration] t26 (idt) (6) = 0 (int) (6)
[Assignment] t26 (idt) (6) = i (idt) (6)
[Declaration] t27 (int) (6) = 0 (int) (6)
[Assignment] t27 (int) (6) = 1 (int) (6)
[Binary Op] t25 (int) (6) = t26 (idt) (6) + t27 (int) (6) 
[Declaration] t28 (int) (6) = 0 (int) (6)
[Declaration] t29 (idt) (6) = 0 (int) (6)
[Assignment] t29 (idt) (6) = current (idt) (6)
[Declaration] t30 (int) (6) = 0 (int) (6)
[Assignment] t30 (int) (6) = t25 (int) (6)
[Binary Op] t28 (int) (6) = t29 (idt) (6) >> t30 (int) (6) 
[Declaration] t31 (int) (6) = 0 (int) (6)
[Declaration] t32 (int) (6) = 0 (int) (6)
[Assignment] t32 (int) (6) = t28 (int) (6)
[Declaration] t33 (int) (6) = 0 (int) (6)
[Assignment] t33 (int) (6) = 1 (int) (6)
[Binary Op] t31 (int) (6) = t32 (int) (6) & t33 (int) (6) 
[Assignment] left (int) (6) = t31 (int) (6)
[Jump] goto L6

[Label] L5:
[Assignment] left (int) (7) = 0 (int) (7)

[Label] L6:
[Declaration] t34 (idt) (5) = 0 (int) (5)
[Declaration] t35 (idt) (5) = 0 (int) (5)
[Assignment] t35 (idt) (5) = current (idt) (5)
[Declaration] t36 (idt) (5) = 0 (int) (5)
[Assignment] t36 (idt) (5) = i (idt) (5)
[Binary Op] t34 (idt) (5) = t35 (idt) (5) >> t36 (idt) (5) 
[Declaration] t37 (int) (5) = 0 (int) (5)
[Declaration] t38 (idt) (5) = 0 (int) (5)
[Assignment] t38 (idt) (5) = t34 (idt) (5)
[Declaration] t39 (int) (5) = 0 (int) (5)
[Assignment] t39 (int) (5) = 1 (int) (5)
[Binary Op] t37 (int) (5) = t38 (idt) (5) & t39 (int) (5) 
[Declaration] center (int) (5) = t37 (int) (5)
[Declaration] right (idt) (5) unassigned
[Declaration] t40 (bool) (5) = 0 (int) (5)
[Declaration] t41 (idt) (5) = 0 (int) (5)
[Assignment] t41 (idt) (5) = i (idt) (5)
[Declaration] t42 (int) (5) = 0 (int) (5)
[Assignment] t42 (int) (5) = 0 (int) (5)
[Binary Op] t40 (bool) (5) = t41 (idt) (5) == t42 (int) (5) 
[Conditional Jump] if t40 (bool) (5) != 0 (int) (5) goto L7
[Declaration] t43 (int) (8) = 0 (int) (8)
[Declaration] t44 (idt) (8) = 0 (int) (8)
[Assignment] t44 (idt) (8) = i (idt) (8)
[Declaration] t45 (int) (8) = 0 (int) (8)
[Assignment] t45 (int) (8) = 1 (int) (8)
[Binary Op] t43 (int) (8) = t44 (idt) (8) - t45 (int) (8) 
[Declaration] t46 (int) (8) = 0 (int) (8)
[Declaration] t47 (idt) (8) = 0 (int) (8)
[Assignment] t47 (idt) (8) = current (idt) (8)
[Declaration] t48 (int) (8) = 0 (int) (8)
[Assignment] t48 (int) (8) = t43 (int) (8)
[Binary Op] t46 (int) (8) = t47 (idt) (8) >> t48 (int) (8) 
[Declaration] t49 (int) (8) = 0 (int) (8)
[Declaration] t50 (int) (8) = 0 (int) (8)
[Assignment] t50 (int) (8) = t46 (int) (8)
[Declaration] t51 (int) (8) = 0 (int) (8)
[Assignment] t51 (int) (8) = 1 (int) (8)
[Binary Op] t49 (int) (8) = t50 (int) (8) & t51 (int) (8) 
[Assignment] right (int) (8) = t49 (int) (8)
[Jump] goto L8

[Label] L7:
[Assignment] right (int) (9) = 0 (int) (9)

[Label] L8:
[Declaration] t52 (int) (5) = 0 (int) (5)
[Declaration] t53 (idt) (5) = 0 (int) (5)
[Assignment] t53 (idt) (5) = left (idt) (5)
[Declaration] t54 (int) (5) = 0 (int) (5)
[Assignment] t54 (int) (5) = 2 (int) (5)
[Binary Op] t52 (int) (5) = t53 (idt) (5) << t54 (int) (5) 
[Declaration] t55 (idt) (5) = 0 (int) (5)
[Declaration] t56 (idt) (5) = 0 (int) (5)
[Assignment] t56 (idt) (5) = current (idt) (5)
[Declaration] t57 (idt) (5) = 0 (int) (5)
[Assignment] t57 (idt) (5) = i (idt) (5)
[Binary Op] t55 (idt) (5) = t56 (idt) (5) >> t57 (idt) (5) 
[Declaration] t58 (int) (5) = 0 (int) (5)
[Declaration] t59 (idt) (5) = 0 (int) (5)
[Assignment] t59 (idt) (5) = t55 (idt) (5)
[Declaration] t60 (int) (5) = 0 (int) (5)
[Assignment] t60 (int) (5) = 1 (int) (5)
[Binary Op] t58 (int) (5) = t59 (idt) (5) & t60 (int) (5) 
[Declaration] t61 (int) (5) = 0 (int) (5)
[Declaration] t62 (int) (5) = 0 (int) (5)
[Assignment] t62 (int) (5) = t58 (int) (5)
[Declaration] t63 (int) (5) = 0 (int) (5)
[Assignment] t63 (int) (5) = 1 (int) (5)
[Binary Op] t61 (int) (5) = t62 (int) (5) << t63 (int) (5) 
[Declaration] t64 (int) (5) = 0 (int) (5)
[Declaration] t65 (int) (5) = 0 (int) (5)
[Assignment] t65 (int) (5) = t52 (int) (5)
[Declaration] t66 (int) (5) = 0 (int) (5)
[Assignment] t66 (int) (5) = t61 (int) (5)
[Binary Op] t64 (int) (5) = t65 (int) (5) | t66 (int) (5) 
[Declaration] t67 (int) (5) = 0 (int) (5)
[Declaration] t68 (int) (5) = 0 (int) (5)
[Assignment] t68 (int) (5) = t64 (int) (5)
[Declaration] t69 (idt) (5) = 0 (int) (5)
[Assignment] t69 (idt) (5) = right (idt) (5)
[Binary Op] t67 (int) (5) = t68 (int) (5) | t69 (idt) (5) 
[Declaration] pattern (int) (5) = t67 (int) (5)
[Declaration] t70 (int) (5) = 0 (int) (5)
[Declaration] t71 (idt) (5) = 0 (int) (5)
[Assignment] t71 (idt) (5) = left (idt) (5)
[Declaration] t72 (int) (5) = 0 (int) (5)
[Assignment] t72 (int) (5) = 2 (int) (5)
[Binary Op] t70 (int) (5) = t71 (idt) (5) << t72 (int) (5) 
[Declaration] t73 (idt) (5) = 0 (int) (5)
[Declaration] t74 (idt) (5) = 0 (int) (5)
[Assignment] t74 (idt) (5) = current (idt) (5)
[Declaration] t75 (idt) (5) = 0 (int) (5)
[Assignment] t75 (idt) (5) = i (idt) (5)
[Binary Op] t73 (idt) (5) = t74 (idt) (5) >> t75 (idt) (5) 
[Declaration] t76 (int) (5) = 0 (int) (5)
[Declaration] t77 (idt) (5) = 0 (int) (5)
[Assignment] t77 (idt) (5) = t73 (idt) (5)
[Declaration] t78 (int) (5) = 0 (int) (5)
[Assignment] t78 (int) (5) = 1 (int) (5)
[Binary Op] t76 (int) (5) = t77 (idt) (5) & t78 (int) (5) 
[Declaration] t79 (int) (5) = 0 (int) (5)
[Declaration] t80 (int) (5) = 0 (int) (5)
[Assignment] t80 (int) (5) = t76 (int) (5)
[Declaration] t81 (int) (5) = 0 (int) (5)
[Assignment] t81 (int) (5) = 1 (int) (5)
[Binary Op] t79 (int) (5) = t80 (int) (5) << t81 (int) (5) 
[Declaration] t82 (int) (5) = 0 (int) (5)
[Declaration] t83 (int) (5) = 0 (int) (5)
[Assignment] t83 (int) (5) = t70 (int) (5)
[Declaration] t84 (int) (5) = 0 (int) (5)
[Assignment] t84 (int) (5) = t79 (int) (5)
[Binary Op] t82 (int) (5) = t83 (int) (5) | t84 (int) (5) 
[Declaration] t85 (int) (5) = 0 (int) (5)
[Declaration] t86 (int) (5) = 0 (int) (5)
[Assignment] t86 (int) (5) = t82 (int) (5)
[Declaration] t87 (idt) (5) = 0 (int) (5)
[Assignment] t87 (idt) (5) = right (idt) (5)
[Binary Op] t85 (int) (5) = t86 (int) (5) | t87 (idt) (5) 
[Declaration] t88 (int) (5) = 0 (int) (5)
[Declaration] t89 (int) (5) = 0 (int) (5)
[Assignment] t89 (int) (5) = rule (int) (5)
[Declaration] t90 (int) (5) = 0 (int) (5)
[Assignment] t90 (int) (5) = t85 (int) (5)
[Binary Op] t88 (int) (5) = t89 (int) (5) >> t90 (int) (5) 
[Declaration] t91 (int) (5) = 0 (int) (5)
[Declaration] t92 (int) (5) = 0 (int) (5)
[Assignment] t92 (int) (5) = t88 (int) (5)
[Declaration] t93 (int) (5) = 0 (int) (5)
[Assignment] t93 (int) (5) = 1 (int) (5)
[Binary Op] t91 (int) (5) = t92 (int) (5) & t93 (int) (5) 
[Declaration] next_bit (int) (5) = t91 (int) (5)
[Declaration] t94 (int) (5) = 0 (int) (5)
[Declaration] t95 (idt) (5) = 0 (int) (5)
[Assignment] t95 (idt) (5) = left (idt) (5)
[Declaration] t96 (int) (5) = 0 (int) (5)
[Assignment] t96 (int) (5) = 2 (int) (5)
[Binary Op] t94 (int) (5) = t95 (idt) (5) << t96 (int) (5) 
[Declaration] t97 (idt) (5) = 0 (int) (5)
[Declaration] t98 (idt) (5) = 0 (int) (5)
[Assignment] t98 (idt) (5) = current (idt) (5)
[Declaration] t99 (idt) (5) = 0 (int) (5)
[Assignment] t99 (idt) (5) = i (idt) (5)
[Binary Op] t97 (idt) (5) = t98 (idt) (5) >> t99 (idt) (5) 
[Declaration] t100 (int) (5) = 0 (int) (5)
[Declaration] t101 (idt) (5) = 0 (int) (5)
[Assignment] t101 (idt) (5) = t97 (idt) (5)
[Declaration] t102 (int) (5) = 0 (int) (5)
[Assignment] t102 (int) (5) = 1 (int) (5)
[Binary Op] t100 (int) (5) = t101 (idt) (5) & t102 (int) (5) 
[Declaration] t103 (int) (5) = 0 (int) (5)
[Declaration] t104 (int) (5) = 0 (int) (5)
[Assignment] t104 (int) (5) = t100 (int) (5)
[Declaration] t105 (int) (5) = 0 (int) (5)
[Assignment] t105 (int) (5) = 1 (int) (5)
[Binary Op] t103 (int) (5) = t104 (int) (5) << t105 (int) (5) 
[Declaration] t106 (int) (5) = 0 (int) (5)
[Declaration] t107 (int) (5) = 0 (int) (5)
[Assignment] t107 (int) (5) = t94 (int) (5)
[Declaration] t108 (int) (5) = 0 (int) (5)
[Assignment] t108 (int) (5) = t103 (int) (5)
[Binary Op] t106 (int) (5) = t107 (int) (5) | t108 (int) (5) 
[Declaration] t109 (int) (5) = 0 (int) (5)
[Declaration] t110 (int) (5) = 0 (int) (5)
[Assignment] t110 (int) (5) = t106 (int) (5)
[Declaration] t111 (idt) (5) = 0 (int) (5)
[Assignment] t111 (idt) (5) = right (idt) (5)
[Binary Op] t109 (int) (5) = t110 (int) (5) | t111 (idt) (5) 
[Declaration] t112 (int) (5) = 0 (int) (5)
[Declaration] t113 (int) (5) = 0 (int) (5)
[Assignment] t113 (int) (5) = rule (int) (5)
[Declaration] t114 (int) (5) = 0 (int) (5)
[Assignment] t114 (int) (5) = t109 (int) (5)
[Binary Op] t112 (int) (5) = t113 (int) (5) >> t114 (int) (5) 
[Declaration] t115 (int) (5) = 0 (int) (5)
[Declaration] t116 (int) (5) = 0 (int) (5)
[Assignment] t116 (int) (5) = t112 (int) (5)
[Declaration] t117 (int) (5) = 0 (int) (5)
[Assignment] t117 (int) (5) = 1 (int) (5)
[Binary Op] t115 (int) (5) = t116 (int) (5) & t117 (int) (5) 
[Conditional Jump] if t115 (int) (5) != 0 (int) (5) goto L9
[Jump] goto L10

[Label] L9:
[Declaration] t118 (int) (10) = 0 (int) (10)
[Declaration] t119 (int) (10) = 0 (int) (10)
[Assignment] t119 (int) (10) = 1 (int) (10)
[Declaration] t120 (idt) (10) = 0 (int) (10)
[Assignment] t120 (idt) (10) = i (idt) (10)
[Binary Op] t118 (int) (10) = t119 (int) (10) << t120 (idt) (10) 
[Declaration] t121 (int) (10) = 0 (int) (10)
[Declaration] t122 (idt) (10) = 0 (int) (10)
[Assignment] t122 (idt) (10) = next (int) (10)
[Declaration] t123 (int) (10) = 0 (int) (10)
[Assignment] t123 (int) (10) = t118 (int) (10)
[Binary Op] t121 (int) (10) = t122 (idt) (10) | t123 (int) (10) 
[Assignment] next (int) (10) = t121 (int) (10)

[Label] L10:
[Declaration] t124 (idt) (5) = next (idt) (5)
[Return] return t124 (idt) (5)
[Function end] function end
[Function start] function generate_automata begin:
[Parameter] param rule (int) (11)
[Parameter] param width (int) (11)
[Parameter] param steps (int) (11)
[Declaration] t125 (int) (11) = 0 (int) (11)
[Declaration] t126 (int) (11) = 0 (int) (11)
[Assignment] t126 (int) (11) = width (int) (11)
[Declaration] t127 (int) (11) = 0 (int) (11)
[Assignment] t127 (int) (11) = 2 (int) (11)
[Binary Op] t125 (int) (11) = t126 (int) (11) / t127 (int) (11) 
[Declaration] t-128 (int) (11) = 0 (int) (11)
[Declaration] t-127 (int) (11) = 0 (int) (11)
[Assignment] t-127 (int) (11) = 1 (int) (11)
[Declaration] t-126 (int) (11) = 0 (int) (11)
[Assignment] t-126 (int) (11) = t125 (int) (11)
[Binary Op] t-128 (int) (11) = t-127 (int) (11) << t-126 (int) (11) 
[Declaration] current (int) (11) = t-128 (int) (11)
[Declaration] step (int) (11) = 0 (int) (11)

[Label] L11:
[Declaration] t-125 (bool) (11) = 0 (int) (11)
[Declaration] t-124 (int) (11) = 0 (int) (11)
[Assignment] t-124 (int) (11) = step (int) (11)
[Declaration] t-123 (int) (11) = 0 (int) (11)
[Assignment] t-123 (int) (11) = steps (int) (11)
[Binary Op] t-125 (bool) (11) = t-124 (int) (11) < t-123 (int) (11) 
[Conditional Jump] if t-125 (bool) (11) != 0 (int) (11) goto L12
[Jump] goto L13

[Label] L12:
[Declaration] next (int) (12) = 0 (int) (12)
[Declaration] t-122 (int) (12) = current (int) (12)
[Argument] arg t-122 (int) (12)
[Declaration] t-121 (int) (12) = 0 (int) (12)
[Function call] t-121 (int) (12) = call print_state (idt) (12), 1
[Declaration] i (int) (12) = 0 (int) (12)

[Label] L14:
[Declaration] t-120 (bool) (12) = 0 (int) (12)
[Declaration] t-119 (int) (12) = 0 (int) (12)
[Assignment] t-119 (int) (12) = i (int) (12)
[Declaration] t-118 (int) (12) = 0 (int) (12)
[Assignment] t-118 (int) (12) = width (int) (12)
[Binary Op] t-120 (bool) (12) = t-119 (int) (12) < t-118 (int) (12) 
[Conditional Jump] if t-120 (bool) (12) != 0 (int) (12) goto L15
[Jump] goto L16

[Label] L15:
[Declaration] t-117 (int) (13) = rule (int) (13)
[Argument] arg t-117 (int) (13)
[Declaration] t-116 (int) (13) = current (int) (13)
[Argument] arg t-116 (int) (13)
[Declaration] t-115 (int) (13) = next (int) (13)
[Argument] arg t-115 (int) (13)
[Declaration] t-114 (int) (13) = i (int) (13)
[Argument] arg t-114 (int) (13)
[Declaration] t-113 (int) (13) = 0 (int) (13)
[Function call] t-113 (int) (13) = call update_state (idt) (13), 4
[Assignment] next (int) (13) = t-113 (int) (13)
[Declaration] t-112 (int) (13) = 0 (int) (13)
[Unary op] t-112 (int) (13) = ++i (int) (13) 
[Assignment] i (int) (13) = t-112 (int) (13)
[Jump] goto L14

[Label] L16:
[Assignment] current (int) (12) = next (int) (12)
[Declaration] t-111 (int) (12) = 0 (int) (12)
[Unary op] t-111 (int) (12) = ++step (int) (12) 
[Assignment] step (int) (12) = t-111 (int) (12)
[Jump] goto L11

[Label] L13:
[Function end] function end
[Main start] main begin:
[Declaration] t-110 (int) (14) = rule (int) (14)
[Argument] arg t-110 (int) (14)
[Declaration] t-109 (int) (14) = width (int) (14)
[Argument] arg t-109 (int) (14)
[Declaration] t-108 (int) (14) = steps (int) (14)
[Argument] arg t-108 (int) (14)
[Declaration] t-107 (int) (14) = 0 (int) (14)
[Function call] t-107 (int) (14) = call generate_automata (idt) (14), 3
[Main end] main end

hello bro

bro take out printf say;

bro remember this x = "declared in global";


bro lemme create print_global(){
    say("From print_global: %s\n",x);
}

bro lemme create print_infunc(){
    bro remember this x = "declared in function";
    say("From print_infunc: %s\n",x);
}

bro lemme create print_inblock(){
    bro remember this x = "declared in func scope";
    bro if(1){
        bro remember this x = "declared in block scope";
        say("From print_inblock: %s\n",x);
    }
}

bro lemme create print_access_from_outer_block(){
    bro remember this x = "declard in outer block";
    bro if(1){
        say("Frome print_access_from_outer_block: %s\n",x);
    }
}


bro lemme create print_nestblocks(){
    bro remember this x = "block 1";
    bro if(1){
        bro remember this x = "block 2";
        bro if(1){
            bro remember this x = "block 3";
            say("From print_nestblocks, Block 3 : %s\n",x);
        }
        say("From print_nestblocks, Block 2 : %s\n",x);
    }
    say("From print_nestblocks, Block 1 : %s\n",x);
}

bro lemme create print_funcvsblockscope(){
    bro if(1){
        bro remember this x = "block scope";
        say("From print_funcvsblockscope, Block scope : %s\n",x);
    }
    bro remember this x = "function scope";
    say("From print_funcvsblockscope,Function scope : %s\n",x);
}

bro lemme create return_localvalue(){
    bro remember this x = 1;
    bro return this x;
}

//----------------INVALID TESTS (should error out)-----------------------//

/*
bro lemme create illegal_access_to_outer_scope(){
    bro if(1){
        bro remember this y = 99;
        say("From illegal_access_to_outer_scope, From block scope : %d\n",y);
    }
    say("From illegal_access_to_outer_scope, From function scope : %d\n",y);
}
*/

/*
bro lemme create illegal_redeclaration_in_same_scope(){
    bro remember this x = "From illegal_redeclaration_in_same_scope, First declaration";
    bro remember this x = "From illegal_redeclaration_in_same_scope, Second declaration";
    say("From illegal_redeclaration_in_same_scope, %s\n",x);
}
*/

bro start here{

    print_global();
    print_infunc();
    print_inblock();
    print_access_from_outer_block();
    print_nestblocks();
    print_funcvsblockscope();
    bro remember this x = return_localvalue();
    say("From return_localvalue, Value : %d\n",x);

    //----------------INVALID TESTS (should error out)------------------//
    //illegal_access_to_outer_scope();
    //illegal_redeclaration_in_same_scope();

}

bye bro
_________ 

__________________ printf _;

__ x = "declared in global";


_______ ______________________(){
    _("From _____________________: %s\n",x);
}

_______ _______________________(){
    __ x = "declared in function";
    _("From _______________________: %s\n",x);
}

_______ ________________________(){
    __ x = "declared in func scope";
    ___(1){
        __ x = "declared in block scope";
        _("From ________________________: %s\n",x);
    }
}

_______ __________________________(){
    __ x = "declard in outer block";
    ___(1){
        _("From __________________________: %s\n",x);
    }
}


_______ ___________________________(){
    __ x = "block 1";
    ___(1){
        __ x = "block 2";
        ___(1){
            __ x = "block 3";
            _("From ___________________________, Block 3 : %s\n",x);
        }
        _("From ___________________________, Block 2 : %s\n",x);
    }
    _("From ___________________________, Block 1 : %s\n",x);
}

_______ ____________________________(){
    ___(1){
        __ x = "block scope";
        _("From ____________________________, Block scope : %s\n",x);
    }
    __ x = "function scope";
    _("From ____________________________,Function scope : %s\n",x);
}

_______ _____________________________(){
    __ x = 1;
    ________ x;
}

//----------------INVALID TESTS (should error out)-----------------------//

/*
_______ ______________________________(){
    ___(1){
        __ y = 99;
        _("From ______________________________, From block scope : %d\n",y);
    }
    _("From ______________________________, From function scope : %d\n",y);
}
*/

/*
_______ _______________________________(){
    __ x = "From _______________________________, First declaration";
    __ x = "From _______________________________, Second declaration";
    _("From _______________________________, %s\n",x);
}
*/

___________________{

    ______________________();
    _______________________();
    ________________________();
    __________________________();
    ___________________________();
    ____________________________();
    __ x = _____________________________();
    _("From _____________________________, Value : %d\n",x);

    //----------------INVALID TESTS (should error out)------------------//
    //______________________________();
    //_______________________________();

}

__________
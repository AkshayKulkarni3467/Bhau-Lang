$ Token :BL_KW_HI_BHAU:
$ Token {
   type          : 309
   location      : line 1, offset 8
   chars         : 'hi bhau'
   string value  : "hi bhau" (len=7)
}

$ Token :BL_KW_BHAU_BAHERUN_GHE:
$ Token {
   type          : 317
   location      : line 3, offset 17
   chars         : 'bhau baherun ghe'
   string value  : "bhau baherun ghe" (len=16)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 3, offset 24
   chars         : 'printf'
   string value  : "printf" (len=6)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 3, offset 25
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_KW_BHAU_HAI_AHE:
$ Token {
   type          : 301
   location      : line 5, offset 13
   chars         : 'bhau hai ahe'
   string value  : "bhau hai ahe" (len=12)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 5, offset 15
   chars         : 'x'
   string value  : "x" (len=1)
}

$ Token :BL_EQUAL:
$ Token {
   type          : 269
   location      : line 5, offset 17
   chars         : '='
   string value  : "=" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 5, offset 19
   chars         : '4'
   string value  : "4" (len=1)
   int value     : 4
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 5, offset 20
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_KW_BHAU_HAI_AHE:
$ Token {
   type          : 301
   location      : line 6, offset 13
   chars         : 'bhau hai ahe'
   string value  : "bhau hai ahe" (len=12)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 6, offset 15
   chars         : 'y'
   string value  : "y" (len=1)
}

$ Token :BL_EQUAL:
$ Token {
   type          : 269
   location      : line 6, offset 17
   chars         : '='
   string value  : "=" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 6, offset 19
   chars         : '5'
   string value  : "5" (len=1)
   int value     : 5
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 6, offset 20
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_KW_BHAU_MAIN:
$ Token {
   type          : 318
   location      : line 8, offset 10
   chars         : 'bhau main'
   string value  : "bhau main" (len=9)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 262
   location      : line 8, offset 11
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 263
   location      : line 8, offset 12
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 264
   location      : line 8, offset 13
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :case BL_KW_BHAU_JOPARENT:
$ Token {
   type          : 305
   location      : line 9, offset 18
   chars         : 'bhau joparent'
   string value  : "bhau joparent" (len=13)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 262
   location      : line 9, offset 19
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 9, offset 20
   chars         : 'x'
   string value  : "x" (len=1)
}

$ Token :BL_GRTTHAN:
$ Token {
   type          : 291
   location      : line 9, offset 22
   chars         : '>'
   string value  : ">" (len=1)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 9, offset 24
   chars         : '0'
   string value  : "0" (len=1)
   int value     : 0
}

$ Token :BL_RPAREN:
$ Token {
   type          : 263
   location      : line 9, offset 25
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 264
   location      : line 9, offset 26
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :BL_KW_BHAU_JAR:
$ Token {
   type          : 302
   location      : line 10, offset 17
   chars         : 'bhau jar'
   string value  : "bhau jar" (len=8)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 262
   location      : line 10, offset 18
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 10, offset 19
   chars         : 'x'
   string value  : "x" (len=1)
}

$ Token :BL_ISEQUALCOND:
$ Token {
   type          : 270
   location      : line 10, offset 22
   chars         : '=='
   string value  : "==" (len=2)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 10, offset 24
   chars         : '1'
   string value  : "1" (len=1)
   int value     : 1
}

$ Token :BL_RPAREN:
$ Token {
   type          : 263
   location      : line 10, offset 25
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 264
   location      : line 10, offset 26
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 11, offset 19
   chars         : 'printf'
   string value  : "printf" (len=6)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 262
   location      : line 11, offset 20
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_STRING:
$ Token {
   type          : 259
   location      : line 11, offset 35
   chars         : '"Hello first\n"'
   string value  : "Hello first\n" (len=13)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 263
   location      : line 11, offset 36
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 11, offset 37
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 265
   location      : line 12, offset 10
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :BL_KW_BHAU_NAHITAR:
$ Token {
   type          : 303
   location      : line 13, offset 21
   chars         : 'bhau nahitar'
   string value  : "bhau nahitar" (len=12)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 262
   location      : line 13, offset 22
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 13, offset 23
   chars         : 'x'
   string value  : "x" (len=1)
}

$ Token :BL_ISEQUALCOND:
$ Token {
   type          : 270
   location      : line 13, offset 26
   chars         : '=='
   string value  : "==" (len=2)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 13, offset 28
   chars         : '2'
   string value  : "2" (len=1)
   int value     : 2
}

$ Token :BL_RPAREN:
$ Token {
   type          : 263
   location      : line 13, offset 29
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 264
   location      : line 13, offset 30
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 14, offset 19
   chars         : 'printf'
   string value  : "printf" (len=6)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 262
   location      : line 14, offset 20
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_STRING:
$ Token {
   type          : 259
   location      : line 14, offset 33
   chars         : '"Hello two\n"'
   string value  : "Hello two\n" (len=11)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 263
   location      : line 14, offset 34
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 14, offset 35
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 265
   location      : line 15, offset 10
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :case BL_KW_BHAU_TAR:
$ Token {
   type          : 304
   location      : line 16, offset 17
   chars         : 'bhau tar'
   string value  : "bhau tar" (len=8)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 262
   location      : line 16, offset 18
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 16, offset 19
   chars         : 'x'
   string value  : "x" (len=1)
}

$ Token :BL_ISEQUALCOND:
$ Token {
   type          : 270
   location      : line 16, offset 22
   chars         : '=='
   string value  : "==" (len=2)
}

$ Token :BL_INT:
$ Token {
   type          : 257
   location      : line 16, offset 24
   chars         : '3'
   string value  : "3" (len=1)
   int value     : 3
}

$ Token :BL_RPAREN:
$ Token {
   type          : 263
   location      : line 16, offset 25
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_LBRACE:
$ Token {
   type          : 264
   location      : line 16, offset 26
   chars         : '{'
   string value  : "{" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 17, offset 19
   chars         : 'printf'
   string value  : "printf" (len=6)
}

$ Token :BL_LPAREN:
$ Token {
   type          : 262
   location      : line 17, offset 20
   chars         : '('
   string value  : "(" (len=1)
}

$ Token :BL_STRING:
$ Token {
   type          : 259
   location      : line 17, offset 33
   chars         : '"Hello three"'
   string value  : "Hello three" (len=11)
}

$ Token :BL_RPAREN:
$ Token {
   type          : 263
   location      : line 17, offset 34
   chars         : ')'
   string value  : ")" (len=1)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 17, offset 35
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 265
   location      : line 18, offset 10
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :BL_IDENTIFIER:
$ Token {
   type          : 256
   location      : line 19, offset 10
   chars         : 'x'
   string value  : "x" (len=1)
}

$ Token :BL_DEC:
$ Token {
   type          : 280
   location      : line 19, offset 12
   chars         : '--'
   string value  : "--" (len=2)
}

$ Token :BL_SEMICOLON:
$ Token {
   type          : 261
   location      : line 19, offset 13
   chars         : ';'
   string value  : ";" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 265
   location      : line 20, offset 6
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :BL_RBRACE:
$ Token {
   type          : 265
   location      : line 21, offset 2
   chars         : '}'
   string value  : "}" (len=1)
}

$ Token :BL_KW_BYE_BHAU:
$ Token {
   type          : 310
   location      : line 24, offset 9
   chars         : 'bye bhau'
   string value  : "bye bhau" (len=8)
}

$ Token :BL_EOF:
$ Token {
   type          : 300
   location      : line 24, offset 10
   chars         : ''
   string value  : "" (len=1)
}

